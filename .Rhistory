orderbook_spec <- c(Con_FieldName_OrdID,
Con_FieldName_Time,
Con_FieldName_Sym,
Con_FieldName_Price,
Con_FieldName_Qty,
Con_FieldName_Side,
Con_FieldName_OrdType)
Con_FieldName_MsgType = "Msgtype"
Con_FieldName_Sym = "Symbol"
Con_FieldName_Price = "Price"
Con_FieldName_Qty = "Quantity"
Con_FieldName_Side = "Side"
Con_FieldName_OrdType = "OrdType"
Con_FieldName_OrdID = "OrdID"
Con_FieldName_Time = "Timestamp"
Con_FieldName_ExecStatus = "ExecStatus"
Con_FieldName_AvgPrice = "AvgPrice"
Con_FieldName_BookVal = "BookValue"
Con_FieldName_MktVal = "MarketValue"
Con_FieldName_OpenClose = "Open/Close"
Con_FieldName_Pnl = "PnL"
orderbook_spec <- c(Con_FieldName_OrdID,
Con_FieldName_Time,
Con_FieldName_Sym,
Con_FieldName_Price,
Con_FieldName_Qty,
Con_FieldName_Side,
Con_FieldName_OrdType)
orderbook_spec
orderbook = data.frame(matrix(0, nrow=1, length(order_msg_spec)))
order_msg_spec <- c(Con_FieldName_MsgType,
Con_FieldName_Sym,
Con_FieldName_Price,
Con_FieldName_Qty,
Con_FieldName_Side,
Con_FieldName_OrdType,
Con_FieldName_OrdID,
Con_FieldName_Time)
order_msg_spec
library(XLConnect)
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/Intraday_Test_Data.xls",
sheet=1,
startRow = 3,
check.names = FALSE
)
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
tick = file[, mylist[1]:   (mylist[2] - 1)]
bid  = file[,(mylist[2]+1):(mylist[3] - 1)]
ask  = file[,(mylist[3]+1):length(file)]
library(XLConnect)
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/Intraday_Test_Data1.xls",
sheet=1,
startRow = 3,
check.names = FALSE
)
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
tick = file[, mylist[1]:   (mylist[2] - 1)]
bid  = file[,(mylist[2]+1):(mylist[3] - 1)]
ask  = file[,(mylist[3]+1):length(file)]
tick$OPEN[1,1]
tick$OPEN[1]
tick$OPEN[3]
tick$Date[1]
tick$Date[end]
tick$Date[length(tick$Date)]
library(XLConnect)
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/testdata.xls",
sheet=1,
startRow = 3,
check.names = FALSE
)
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
tick = file[, mylist[1]:   (mylist[2] - 1)]
bid  = file[,(mylist[2]+1):(mylist[3] - 1)]
ask  = file[,(mylist[3]+1):length(file)]
tick$HIGH
rm(list=ls())
# output <- function(tradesbook, positionbook, ask_prices, bid_prices, market_data){
### TESTED
tradesbook <- global_tables$tradesbook
# manually add a row into the tradebook since the naive strategy doesn't empty inventory at end of session
new_row <- c(1444071660, "AAPL", 1, 1, 110.92, "Close", .15)
tradesbook <- rbind(tradesbook, new_row)
positionbook <- global_tables$positionbook
### TESTED
### TESTED
# manipulate positionbook to make it a dataframe (it is received as a list)
positionbook <- do.call(rbind, positionbook)
positionbook <- cbind(Timestamp = rownames(positionbook), positionbook)
rownames(positionbook) <- 1:nrow(positionbook)
positionbook$Timestamp <- sapply(strsplit(as.character(positionbook$Timestamp),".",fixed = TRUE), "[[", 1)
ask_prices <- global_tables$ask_price
bid_prices <- global_tables$bid_price
### TESTED
### TESTED
# find the unique stocks that have been traded over the duration
stock_list <- unique(as.vector(tradesbook$Symbol))
# Set up the data frame which will store the cumulative pnl values for each stock and portfolio
Pnl_df <- data.frame(Symbol=character(), DateTime=as.Date(character()), BidAskPrice=character(),
BookValue=integer(), Side=integer(), Quantity = integer(),
Open.Close = character(), PnLStock = integer(), Cash = integer(),
Portfolio = integer(), PnLPortfolio = integer())
setwd("E:/YEAR 4/Code/APS490RBCCM")
source('constants.r')
source('data_cleaning.r')
getquotes<-function(env,symbol,time){
# return (Nstocks * rows)
# if no quote then return empty
# aftermarket hour, 930-4 then return empty
#===========================================
# this function returns an updated mkt_quote table
mkt_quote = data.frame(matrix(NA, length(symbol), length(mkt_quote_spec)))
colnames(mkt_quote) <- mkt_quote_spec
time_930 <- get_time_since_open(as.POSIXct("2000-01-01 09:30:00", tz = "EST"))
time_931 <- get_time_since_open(as.POSIXct("2000-01-01 09:31:00", tz = "EST"))
time_1559 <- get_time_since_open(as.POSIXct("2000-01-01 15:59:00", tz = "EST"))
time_1600 <- get_time_since_open(as.POSIXct("2000-01-01 16:00:00", tz = "EST"))
for (i in 1:length(symbol)){
#time <- "2000-01-01 09:30:00 EST"
datatable_name_tick <- paste(symbol[i], Con_Data_Tick_Suffix, sep = "")
datatable_name_bid <- paste(symbol[i], Con_Data_Bid_Suffix, sep = "")
datatable_name_ask <- paste(symbol[i], Con_Data_Ask_Suffix, sep = "")
time_since_open <- get_time_since_open(as.POSIXct(time))
if (time_since_open == time_930){
# 9:30 then opening tick for 5 prices, val/vol/tick = 0
j <- (1:nrow(env[[datatable_name_tick]]))[env[[datatable_name_tick]][[Con_Data_ColName_Date]] == time]
if (length(j) == 0){
return (mkt_quote)
}
else{
mkt_quote[i, Con_FieldName_Sym] <- symbol[i]
mkt_quote[i, Con_FieldName_CurrentBid] <- env[[datatable_name_tick]][[Con_Data_ColName_Open]][j]
mkt_quote[i, Con_FieldName_CurrentAsk] <- env[[datatable_name_tick]][[Con_Data_ColName_Open]][j]
mkt_quote[i, Con_FieldName_CurrentTick] <- env[[datatable_name_tick]][[Con_Data_ColName_Open]][j]
mkt_quote[i, Con_FieldName_LastHighestBid] <- env[[datatable_name_tick]][[Con_Data_ColName_Open]][j]
mkt_quote[i, Con_FieldName_LastLowestAsk] <- env[[datatable_name_tick]][[Con_Data_ColName_Open]][j]
mkt_quote[i, Con_Data_ColName_LastNumTicks] <- 0
mkt_quote[i, Con_Data_ColName_LastVolume] <- 0
mkt_quote[i, Con_Data_ColName_LastValue] <- 0
}
}
else if (time_since_open == time_1600){
# 15:59 close tick,val/vol/tick
j <- (1:nrow(env[[datatable_name_tick]]))[env[[datatable_name_tick]][[Con_Data_ColName_Date]] == time - 60]
if (length(j) == 0){
return (mkt_quote)
}
else{
mkt_quote[i, Con_FieldName_Sym] <- symbol[i]
mkt_quote[i, Con_FieldName_CurrentBid] <- env[[datatable_name_tick]][[Con_Data_ColName_LastPrice]][j]
mkt_quote[i, Con_FieldName_CurrentAsk] <- env[[datatable_name_tick]][[Con_Data_ColName_LastPrice]][j]
mkt_quote[i, Con_FieldName_CurrentTick] <- env[[datatable_name_tick]][[Con_Data_ColName_LastPrice]][j]
mkt_quote[i, Con_FieldName_LastHighestBid] <- env[[datatable_name_bid]][[Con_Data_ColName_High]][j]
mkt_quote[i, Con_FieldName_LastLowestAsk] <- env[[datatable_name_ask]][[Con_Data_ColName_Low]][j]
mkt_quote[i, Con_Data_ColName_LastNumTicks] <- env[[datatable_name_tick]][[Con_Data_ColName_NumTicks]][j]
mkt_quote[i, Con_Data_ColName_LastVolume] <- env[[datatable_name_tick]][[Con_Data_ColName_Volume]][j]
mkt_quote[i, Con_Data_ColName_LastValue] <- env[[datatable_name_tick]][[Con_Data_ColName_Value]][j]
}
}
else if (time_since_open >= time_931 & time_since_open <= time_1559){
j <- (1:nrow(env[[datatable_name_tick]]))[env[[datatable_name_tick]][[Con_Data_ColName_Date]] == time]
if (length(j) == 0){
return (mkt_quote)
}
else{
mkt_quote[i, Con_FieldName_Sym] <- symbol[i]
mkt_quote[i, Con_FieldName_CurrentBid] <- env[[datatable_name_bid]][[Con_Data_ColName_Open]][j]
mkt_quote[i, Con_FieldName_CurrentAsk] <- env[[datatable_name_ask]][[Con_Data_ColName_Open]][j]
mkt_quote[i, Con_FieldName_CurrentTick] <- env[[datatable_name_tick]][[Con_Data_ColName_Open]][j]
mkt_quote[i, Con_FieldName_LastHighestBid] <- env[[datatable_name_bid]][[Con_Data_ColName_High]][j-1]
mkt_quote[i, Con_FieldName_LastLowestAsk] <- env[[datatable_name_ask]][[Con_Data_ColName_Low]][j-1]
mkt_quote[i, Con_Data_ColName_LastNumTicks] <- env[[datatable_name_tick]][[Con_Data_ColName_NumTicks]][j-1]
mkt_quote[i, Con_Data_ColName_LastVolume] <- env[[datatable_name_tick]][[Con_Data_ColName_Volume]][j-1]
mkt_quote[i, Con_Data_ColName_LastValue] <- env[[datatable_name_tick]][[Con_Data_ColName_Value]][j-1]
}
}
else{
}
}
# this function returns an updated mkt_quote table
return (mkt_quote)
}
#untested
update_pendingorderbook <- function (env, timestamp, symbol){
#orderbook is a referene (pointer in an environment), and changes are meant to be permanent
#taking in orderbook as argument and returns a list containing execution messages
#for the purpose of this back testing order book will only contain pending limit orders
#env <-global_tables
#symbol <- "BNS"
#timestamp <- "2015-05-13 09:41:00 EDT"
orderbook <- env[[Con_GlobalVarName_LOB]]
quotes <- getquotes(env, symbol, timestamp)
symbols_on_book <- orderbook[, Con_FieldName_Sym]
dim(symbols_on_book) <- length(symbols_on_book)
ask <- apply(symbols_on_book, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_LastLowestAsk])})
bid <- apply(symbols_on_book, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_LastHighestBid])})
ready_indices <- (orderbook[,Con_FieldName_Price] >= ask & orderbook[,Con_FieldName_Side] == Con_Side_Buy) |(orderbook[,Con_FieldName_Price] <= bid & orderbook[,Con_FieldName_Side] == Con_Side_Sell)
ready_orders <- orderbook[ready_indices,]
executed_price <- orderbook[ready_indices, Con_FieldName_Price]
env[[Con_GlobalVarName_LOB]] <- orderbook[!ready_indices,]
exec_msgs <- generate_fill_msgs(ready_orders, executed_price, timestamp)
update_trades_pnl_tables(exec_msgs, env, timestamp)
return (exec_msgs)
}
update_trades_pnl_tables<- function (fill_msgs, env, timestamp){
#posTable and tradesTable are references and changes are permanent
#takes in a list of execution messages and change the two tables, returns nothing
#make sure every message is fill for sure
fill_msgs <- fill_msgs[fill_msgs[,Con_FieldName_ExecStatus] == Con_ExecStatus_filled,]
if (nrow(fill_msgs) == 0){
return()
}
#update the position tables & trades table
tradesbook_name <- Con_GlobalVarName_TradesBook
positionbook <- env[[Con_GlobalVarName_PositionBook]]
last_pos <- positionbook[[length(positionbook)]]
new_pos <- last_pos
previous_cash <- new_pos[new_pos[, Con_FieldName_Sym]== Con_Sym_Cash, Con_FieldName_Qty]
cash_change <- 0
for (i in 1:nrow(fill_msgs)){
fill_sym <- fill_msgs[i, Con_FieldName_Sym]
fill_side <- fill_msgs[i, Con_FieldName_Side]
fill_qty <- fill_msgs[i, Con_FieldName_Qty]
fill_price <- fill_msgs[i, Con_FieldName_AvgPrice]
cash_change <- cash_change + (fill_side == Con_Side_Sell) * fill_qty * fill_price - (fill_side == Con_Side_Buy) * fill_qty * fill_price
#cat("hi", length((1:nrow(new_pos))[new_pos[,Con_FieldName_Sym] == fill_sym]), "\n")
if (length((1:nrow(new_pos))[new_pos[,Con_FieldName_Sym] == fill_sym]) == 0){
#no positions exist for this symbol yet
new_line_index <- nrow(new_pos) + 1
new_pos[new_line_index, Con_FieldName_Sym] <- fill_sym
new_pos[new_line_index, Con_FieldName_Qty] <- ((fill_side == Con_Side_Buy) * fill_qty
- (fill_side == Con_Side_Sell) * fill_qty)
new_pos[new_line_index, Con_FieldName_BookVal] <- new_pos[new_line_index, Con_FieldName_Qty] * fill_price
new_pos[new_line_index, Con_FieldName_MktVal] <- new_pos[new_line_index, Con_FieldName_BookVal]
#update the trades table
insert_into_tradesbook(env, tradesbook_name, time = timestamp, sym = fill_sym,
side = fill_side, qty = fill_qty, price = fill_price,
openclose = Con_OpenClose_Open, pnl = NA)
}
else{
#positions exist for this symbol
index <- (1:nrow(new_pos))[new_pos[,Con_FieldName_Sym] == fill_msgs[i, Con_FieldName_Sym]][1]
orig_quantity <- new_pos[index, Con_FieldName_Qty]
orig_bkval <- new_pos[index, Con_FieldName_BookVal]
new_pos[index, Con_FieldName_Qty] <- (orig_quantity +
(fill_side == Con_Side_Buy) * fill_qty
- (fill_side == Con_Side_Sell) * fill_qty)
new_pos[index, Con_FieldName_MktVal] <- new_pos[index, Con_FieldName_Qty] * fill_price
new_pos[index, Con_FieldName_BookVal] <- (new_pos[index, Con_FieldName_BookVal] +
((fill_side == Con_Side_Buy) * fill_qty
- (fill_side == Con_Side_Sell) * fill_qty) * fill_price)
oc <- Con_OpenClose_Open
pnl <- NA
quantity <- fill_qty
if ((orig_quantity < 0 & fill_side == Con_Side_Buy) | (orig_quantity > 0 & fill_side == Con_Side_Sell)){
#the execution offsets a closes some positions
if ((new_pos[index, Con_FieldName_Qty] > 0 & fill_side == Con_Side_Buy) |
(new_pos[index, Con_FieldName_Qty] < 0 & fill_side == Con_Side_Sell)){
#if the execution opens up an position as well
opposite_pos_qty <- new_pos[index, Con_FieldName_Qty]
oc = Con_OpenClose_Close
pnl = -(orig_quantity) * (orig_bkval/orig_quantity - fill_price)
new_pos[index, Con_FieldName_BookVal] <- new_pos[index, Con_FieldName_BookVal] + pnl
quantity <- abs(orig_quantity)
#cat(quantity, " ", orig_bkval, " ", orig_quantity, " ", orig_bkval/orig_quantity, " ", fill_price, " ", pnl, "\n")
insert_into_tradesbook(env, tradesbook_name, time = timestamp, sym = fill_sym,
side = fill_side, qty = opposite_pos_qty, price = fill_price,
openclose = Con_OpenClose_Open, pnl = NA)
}
else{
oc = Con_OpenClose_Close
pnl = (((fill_side == Con_Side_Buy) * fill_qty - (fill_side == Con_Side_Sell) * fill_qty)
* (orig_bkval/orig_quantity - fill_price))
new_pos[index, Con_FieldName_BookVal] <- new_pos[index, Con_FieldName_BookVal] + pnl
#cat(fill_qty, " ", orig_mktval, " ", orig_quantity, " ", orig_mktval/orig_quantity, " ", fill_price, " ", pnl, "\n")
}
}
insert_into_tradesbook(env, tradesbook_name, time = timestamp, sym = fill_sym,
side = fill_side, qty = quantity, price = fill_price,
openclose = oc, pnl = pnl)
}
}
#if position is flat remove this line
new_pos <- new_pos[!new_pos[,Con_FieldName_Qty] == 0,]
new_pos[new_pos[, Con_FieldName_Sym]== Con_Sym_Cash, c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] <- previous_cash + cash_change
positionbook[[length(positionbook) + 1]] <- new_pos
names(positionbook)[length(positionbook)] <- timestamp
env[[Con_GlobalVarName_PositionBook]] <- positionbook
}
#untested new orders, cancel and replace not implemented
handle_orders <- function (orders, symbol, env, timestamp){
#orderbook is a referene (pointer in an environment), and changes are meant to be permanent
#handles all orders (new, replace, cancels) and update the order book approriately
#returns execution messages
quotes <- getquotes(env, symbol, timestamp)
new_orders <- orders[orders[,Con_FieldName_MsgType] == Con_MsgType_New,]
replace_orders <- orders[orders[,Con_FieldName_MsgType] == Con_MsgType_Replace,]
cancel_orders <- orders[orders[,Con_FieldName_MsgType] == Con_MsgType_Cancel,]
mkt_new <- new_orders[new_orders[,Con_FieldName_OrdType] == Con_OrdType_Mkt, ]
mkt_order_symbols <- mkt_new[, Con_FieldName_Sym]
dim(mkt_order_symbols) <- length(mkt_order_symbols)
mkt_ask <- apply(mkt_order_symbols, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_CurrentAsk])})
mkt_bid <- apply(mkt_order_symbols, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_CurrentBid])})
mkt_exec_prices <- (mkt_new[, Con_FieldName_Side] == Con_Side_Buy ) * mkt_ask +
(mkt_new[, Con_FieldName_Side] == Con_Side_Sell ) * mkt_bid
limit_new <- new_orders[new_orders[,Con_FieldName_OrdType] == Con_OrdType_Limit, ]
lmt_order_symbols <- limit_new[, Con_FieldName_Sym]
dim(lmt_order_symbols) <- length(lmt_order_symbols)
lmt_ask <- apply(lmt_order_symbols, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_CurrentAsk])})
lmt_bid <- apply(lmt_order_symbols, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_CurrentBid])})
mkt_lmt_orders_indices <- (limit_new[,Con_FieldName_Price] >= lmt_ask & limit_new[,Con_FieldName_Side] == Con_Side_Buy) |(limit_new[,Con_FieldName_Price] <= lmt_bid & limit_new[,Con_FieldName_Side] == Con_Side_Sell)
mkt_lmt_orders <- limit_new[mkt_lmt_orders_indices,]
mkt_lmt_ask <- lmt_ask[mkt_lmt_orders_indices]
mkt_lmt_bid <- lmt_bid[mkt_lmt_orders_indices]
mkt_lmt_prices <- (mkt_lmt_orders[, Con_FieldName_Side] == Con_Side_Buy ) * mkt_lmt_ask +
(mkt_lmt_orders[, Con_FieldName_Side] == Con_Side_Sell ) * mkt_lmt_bid
insert_into_orderbook(limit_new, env, Con_GlobalVarName_LOB)
exec_replace <- handle_replaces(replace_orders, orderbook, timestamp)
exec_cancel <- handle_cancels(cancel_orders, orderbook, timestamp)
#fill must come after replace and cancel has been handled
exec_fill <- rbind(generate_fill_msgs(mkt_new, mkt_exec_prices, timestamp), generate_fill_msgs(mkt_lmt_orders, mkt_lmt_prices, timestamp))
update_trades_pnl_tables(exec_fill, env, timestamp)
return(rbind(exec_replace, exec_cancel, exec_fill))
}
#tested
generate_fill_msgs <- function(ready_orders_list, exec_price, timestamp){
fill_msgs <- data.frame(matrix(0, nrow(ready_orders_list), length(exec_msg_spec)))
colnames(fill_msgs) <- exec_msg_spec
fill_msgs[, Con_FieldName_OrdID] <- ready_orders_list[, Con_FieldName_OrdID]
fill_msgs[, Con_FieldName_ExecStatus] <- rep(Con_ExecStatus_filled, nrow(ready_orders_list))
fill_msgs[, Con_FieldName_Sym] <- ready_orders_list[, Con_FieldName_Sym]
fill_msgs[, Con_FieldName_Qty] <- ready_orders_list[, Con_FieldName_Qty]
fill_msgs[, Con_FieldName_AvgPrice] <- exec_price
fill_msgs[, Con_FieldName_Side] <- ready_orders_list[, Con_FieldName_Side]
fill_msgs[, Con_FieldName_Time] <- rep(timestamp, nrow(ready_orders_list))
return (fill_msgs)
}
#tested
insert_into_orderbook <-function(limit_orders, env, orderbook_name){
#orderbook is a referene (pointer in an environment), and changes are meant to be permanent
#insert limit orders into orderbook, return nothing
new_entries <- data.frame((matrix(0, nrow(limit_orders), length(orderbook_spec))))
colnames(new_entries) <- orderbook_spec
new_entries[, Con_FieldName_OrdID] <- limit_orders[, Con_FieldName_OrdID]
new_entries[, Con_FieldName_Time] <- limit_orders[, Con_FieldName_Time]
new_entries[, Con_FieldName_Sym] <- limit_orders[, Con_FieldName_Sym]
new_entries[, Con_FieldName_Price] <- limit_orders[, Con_FieldName_Price]
new_entries[, Con_FieldName_Qty] <- limit_orders[, Con_FieldName_Qty]
new_entries[, Con_FieldName_Side] <- limit_orders[, Con_FieldName_Side]
new_entries[, Con_FieldName_OrdType] <- limit_orders[, Con_FieldName_OrdType]
env[[orderbook_name]] <- rbind(env[[orderbook_name]], new_entries)
}
#tested
insert_into_tradesbook <- function(env, tradesbook_name, time, sym, qty, side, price, openclose, pnl){
new_line_index <- nrow(env[[tradesbook_name]]) + 1
env[[tradesbook_name]][new_line_index, Con_FieldName_Time] <- time
env[[tradesbook_name]][new_line_index, Con_FieldName_Sym] <- sym
env[[tradesbook_name]][new_line_index, Con_FieldName_Side] <- side
env[[tradesbook_name]][new_line_index, Con_FieldName_Qty] <- qty
env[[tradesbook_name]][new_line_index, Con_FieldName_Price] <- price
env[[tradesbook_name]][new_line_index, Con_FieldName_OpenClose] <- openclose
env[[tradesbook_name]][new_line_index, Con_FieldName_Pnl] <- pnl
}
handle_cancels <- function(cancelorders, orderbook, timestamp){
#returns execution messages
#cat(cancelorders)
}
handle_replaces <- function(replaceorders, orderbook, timestamp){
#returns execution messages
}
get_time_since_open <- function(timestamp){
if (strftime(timestamp, format = "%Z") == "EDT")
return ((as.numeric(timestamp) %% 86400) - 48600)
else
return ((as.numeric(timestamp) %% 86400) - 52200)
}
# ################################################
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
datafile_name = "../data/TSXdatafile.xls"
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
import_data(global_tables)
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 780, 780)
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 780, 780)
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
source('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 780, 780)
coffs
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 780, 780)
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 780, 780)
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
summary(coffs)
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
summary(coffs)
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
summary(coffs)
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
totaltime[i]
i
actualtime
tick_data$Date[actualtime]
source('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
source('E:/YEAR 4/Code/APS490RBCCM/obtainthreshold.r')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
totaltime[i]
IPR
IPR_df
totalvalue
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
debugSource('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
diff
threshold
IPR_df
threshold
diff
threshold
IPR_df
diff
threshold
orderline
response
totaltime[i]
global_tables$positionbook
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
global_tables$positionbook
global_tables$positionbook[1]
global_tables$positionbook[2]
global_tables$positionbook[i]['MarketValue']
global_tables$positionbook[1]['MarketValue']
global_tables$positionbook[1][['MarketValue']]
global_tables$positionbook[1][["MarketValue"]]
global_tables$positionbook[1]["MarketValue"]
global_tables$positionbook[[1]]["MarketValue"]
global_tables$positionbook[[2]]["MarketValue"]
results <- data.frame()
for (i in 1:length(global_tables$positionbook)){
results <- rbind(results, portfoliovalue = sum(global_tables$positionbook[[i]]["MarketValue"])
}
results <- data.frame()
for (i in 1:length(global_tables$positionbook)){
results <- rbind(results, portfoliovalue = sum(global_tables$positionbook[[i]]["MarketValue"]))
}
results
source('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
source('E:/YEAR 4/Code/APS490RBCCM/strategy_ipr.R')
strategy_impliedpricerisk(c("AC", "BNS", "BMO"), global_tables, 1560, 1560)
results <- data.frame()
for (i in 1:length(global_tables$positionbook)){
results <- rbind(results, portfoliovalue = sum(global_tables$positionbook[[i]]["MarketValue"]))
}
results
