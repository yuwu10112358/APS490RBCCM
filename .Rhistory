for (Name in EquityList) {
print(Name)
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
data_cleaning <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove NA col
maxrow <- nrow(env[[Name]])
env[[Name]] = env[[Name]][complete.cases(env[[Name]][1:maxrow,] ) ,]
#maxrow <- nrow(env[[tick_name]])
#env[[tick_name]] = env[[tick_name]][complete.cases(env[[tick_name]][1:maxrow,] ) ,]
#maxrow <- nrow(env[[bid_name]])
#env[[bid_name]] = env[[bid_name]][complete.cases(env[[bid_name]][1:maxrow,] ) ,]
#maxrow <- nrow(env[[ask_name]])
#env[[ask_name]] = env[[ask_name]][complete.cases(env[[ask_name]][1:maxrow,] ) ,]
# maxrow <- nrow(env[[tick_name]])
# global_tables[["ABX_tick"]] = global_tables[["ABX_tick"]][complete.cases(global_tables[["ABX_tick"]][1:maxrow,] ) ,]
}
nrow(global_tables[["AC_tick"]])
nrow(global_tables[["AC_ask"]])
nrow(global_tables[["AC_bid"]])
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["AC_bid"]])
nrow(global_tables[["AC_ask"]])
nrow(global_tables[["AC_tick"]])
tail(global_tables[["AC_tick"]])
tail(global_tables[["AC_bid"]])
tail(global_tables[["AC_ask"]])
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
row_to_keep = c(nrow(env[[Name]]))
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
}else {
row_to_keep[i] <- FALSE
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["AC_tick"]])
nrow(global_tables[["AC_ask"]])
nrow(global_tables[["AC_bid"]])
global_tables[["AC_bid"]]
head(global_tables[["AC_bid"]])
global_tables[["AC_bid"]][100,1]
global_tables[["AC_bid"]][1,1]
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime,Closetime)
print(Opentime)
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
print("ioen",Open)
print("ioen",Opentime)
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
row_to_keep = c(nrow(env[[Name]]))
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
print("True",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}else {
row_to_keep[i] <- FALSE
print("Fale",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
row_to_keep = c(nrow(env[[Name]]))
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
print("True",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}else {
row_to_keep[i] <- FALSE
#print("False",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
global_tables[["AC_bid"]]
env <- global_tables
symbol <- "AC"
# the symbol is the same as the excel tab name
tick_name <-"AC_tick"
bid_name <-"AC_bid"
ask_name <-"AC_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/C_1to5.xlsm"
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
global_tables[["bid"]] <- global_tables[["AC_bid"]]
global_tables[["ask"]] <- global_tables[["AC_ask"]]
global_tables[["tick"]] <- global_tables[["AC_tick"]]
nrows(global_tables[["tick"]])
nrow(global_tables[["tick"]])
row_to_keep = c(nrow(global_tables[["tick"]])
)
row_to_keep
list[[3]]
logical(length = 1)
logical(length = 2)
a <-logical(length = 0)
a
a[1]
a[2]
a <-logical(length = 0)
a <-logical(length = 3)
a[1] <-TRUE
a
a[2] - FALSE
a[2] <- FALSE
a
a[2] <- TRUE
a
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
#row_to_keep = c(nrow(env[[Name]]))
row_to_keep <- logical(length = nrow(env[[Name]]) )
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
print("True",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}else {
row_to_keep[i] <- FALSE
#print("False",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
nrows(global_tables[["tick"]])
nrow(global_tables[["tick"]])
EquityList <- c("tick","bid","ask")
for (Name in EquityList) {
print(Name)
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["tick"]])
nrow(global_tables[["ask"]])
nrow(global_tables[["bid"]])
EquityList <- c("tick","bid","ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
#row_to_keep = c(nrow(env[[Name]]))
row_to_keep <- logical(length = nrow(env[[Name]]) )
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
#print("True",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}else {
row_to_keep[i] <- FALSE
#print("False",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
EquityList <- c("tick","bid","ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["bid"]])
nrow(global_tables[["ask"]])
nrow(global_tables[["tick"]])
head(global_tables[["tick"]])
global_tables[["tick"]]
global_tables[["ask"]]
global_tables[["bid"]]
nrow(global_tables[["AC_tick"]])
EquityList <- c("AC_tick","AC_bid","AC_ask")
#EquityList <- c("tick","bid","ask")
for (Name in EquityList) {
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["AC_tick"]])
nrow(global_tables[["AC_ask"]])
nrow(global_tables[["AC_bid"]])
global_tables[["AC_bid"]]
env <- global_tables
symbol <- "BNS"
# the symbol is the same as the excel tab name
tick_name <-"BNS_tick"
bid_name <-"BNS_bid"
ask_name <-"BNS_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/C_26-46.xlsm"
symbol
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
source('constants.r')
setwd("/Users/jewelho/Desktop/Capstone/Code/APS490RBCCM")
# possible errors:
options( java.parameters = "-Xmx6g" )
install.packages("RWeka")
library( "RWeka" )
install.packages("XLConnect")
library(XLConnect)
#install.packages("xts")
#library( "xts" )
env <- global_tables
symbol <- "BNS"
# the symbol is the same as the excel tab name
tick_name <-"BNS_tick"
bid_name <-"BNS_bid"
ask_name <-"BNS_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/C_26-46.xlsm"
source('constants.r')
setwd("/Users/jewelho/Desktop/Capstone/Code/APS490RBCCM")
# possible errors:
options( java.parameters = "-Xmx6g" )
install.packages("RWeka")
library( "RWeka" )
install.packages("XLConnect")
library(XLConnect)
env <- global_tables
symbol <- "AC"
# the symbol is the same as the excel tab name
tick_name <-"AC_tick"
bid_name <-"AC_bid"
ask_name <-"AC_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/TSXdatafile.xlsm"
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
env <- global_tables
symbol <- "AC"
# the symbol is the same as the excel tab name
tick_name <-"AC_tick"
bid_name <-"AC_bid"
ask_name <-"AC_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/TSXdatafile.xlsx"
#=======================================================================
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
EquityList <- c(tick_name,bid_name,ask_name)
for (Name in EquityList) {
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["AC_tick"]])
EquityList <- c(tick_name,bid_name,ask_name)
for (Name in EquityList) {
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["AC_tick"]])
head(global_tables[["AC_tick"]])
env <- global_tables
symbol <- "BNS"
# the symbol is the same as the excel tab name
tick_name <-"BNS_tick"
bid_name <-"BNS_bid"
ask_name <-"BNS_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/TSXdatafile.xlsx"
#=======================================================================
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
EquityList <- c(tick_name,bid_name,ask_name)
for (Name in EquityList) {
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#tail(global_tables[["AC_tick"]])
}
EquityList <- c(tick_name,bid_name,ask_name)
for (Name in EquityList) {
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#tail(global_tables[["AC_tick"]])
}
nrow(global_tables[["BNS_tick"]])
nrow(global_tables[["BNS_ak"]])
nrow(global_tables[["BNS_ask"]])
nrow(global_tables[["BNS_tick"]])
head(global_tables[["BNS_tick"]])
head(global_tables[["BNS_ask"]])
head(global_tables[["BNS_bid"]])
env <- global_tables
symbol <- "BMO"
# the symbol is the same as the excel tab name
tick_name <-"BMO_tick"
bid_name <-"BMO_bid"
ask_name <-"BMO_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/TSXdatafile.xlsx"
#=======================================================================
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
EquityList <- c(tick_name,bid_name,ask_name)
for (Name in EquityList) {
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#tail(global_tables[["AC_tick"]])
}
EquityList <- c(tick_name,bid_name,ask_name)
for (Name in EquityList) {
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#tail(global_tables[["AC_tick"]])
}
head(global_tables[["BMO_tick"]])
head(global_tables[["BMO_ask"]])
head(global_tables[["BMO_tick"]])
EquityList <- c(tick_name,bid_name,ask_name)
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
for (Name in EquityList) {
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#head(global_tables[["BMO_tick"]])
}
head(global_tables[["SPTSX_tick"]])
env <- global_tables
symbol <- "SPTSX"
# the symbol is the same as the excel tab name
tick_name <-"SPTSX_tick"
bid_name <-"SPTSX_bid"
ask_name <-"SPTSX_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/TSXdatafile.xlsx"
#=======================================================================
EquityList <- c(tick_name,bid_name,ask_name)
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
for (Name in EquityList) {
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#head(global_tables[["BMO_tick"]])
}
for (Name in EquityList) {
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#head(global_tables[["BMO_tick"]])
}
head(global_tables[["SPTSX_tick"]])
head(global_tables[["SPTSX_ask"]])
head(global_tables[["SPTSX_bid"]])
cumulative_pnl_dataframe <- data.frame(Symbol = as.character(), CumAssetReturns = as.integer())
for (i in 1:length(stock_list)){
filter_trades <- subset(tradesbook, Symbol == stock_list[i])
filter_position <- subset(positionbook, Symbol == stock_list[i])
asset_return <- 0
for (j in 1:NROW(filter_trades)){
if (filter_trades[j, "Open/Close"] == "Close"){
date_time_1 <- as.POSIXct(as.numeric(filtered_tradesbook[j, "Timestamp"]), origin="1970-01-01")
bk_value <- abs(as.numeric(Pnl_df[Pnl_df$DateTime == date_time_1, ]["BookValue"]))
cur_value <- as.numeric(filter_trades[j, "Price"])
cur_side <- filter_trades[j, "Side"]
cur_asset_return <- (cur_value - bk_value)/(bk_value)*100
if (cur_side == 1){
cur_asset_return <- abs(cur_asset_return)
}
asset_return <- cur_asset_return + asset_return
}
}
cumulative_pnl_dataframe <- rbind(cumulative_pnl_dataframe, data.frame(Symbol = stock_list[i],
CumAssetReturns = asset_return))
}
cumulative_pnl_dataframe
filter_trades
filter_position
date_time_1
bk_value
abs(as.numeric(Pnl_df[Pnl_df$DateTime == date_time_1, ]["BookValue"]))
as.numeric(Pnl_df[Pnl_df$DateTime == date_time_1, ]["BookValue"])
Pnl_df[Pnl_df$DateTime == date_time_1, ]["BookValue"]
abs(as.numeric(Pnl_df[Pnl_df$DateTime == date_time_1 & , Pnl_df$Symbol == stock_list[i]]["BookValue"]))
abs(as.numeric(Pnl_df[Pnl_df$DateTime == date_time_1 & Pnl_df$Symbol == stock_list[i], ]["BookValue"]))
for (i in 1:length(stock_list)){
filter_trades <- subset(tradesbook, Symbol == stock_list[i])
filter_position <- subset(positionbook, Symbol == stock_list[i])
asset_return <- 0
for (j in 1:NROW(filter_trades)){
if (filter_trades[j, "Open/Close"] == "Close"){
date_time_1 <- as.POSIXct(as.numeric(filtered_tradesbook[j, "Timestamp"]), origin="1970-01-01")
bk_value <- abs(as.numeric(Pnl_df[Pnl_df$DateTime == date_time_1 & Pnl_df$Symbol == stock_list[i], ]["BookValue"]))
cur_value <- as.numeric(filter_trades[j, "Price"])
cur_side <- filter_trades[j, "Side"]
cur_asset_return <- (cur_value - bk_value)/(bk_value)*100
if (cur_side == 1){
cur_asset_return <- abs(cur_asset_return)
}
asset_return <- cur_asset_return + asset_return
}
}
cumulative_pnl_dataframe <- rbind(cumulative_pnl_dataframe, data.frame(Symbol = stock_list[i],
CumAssetReturns = asset_return))
}
j
filter_trades[1, "Open/Close"]
filter_trades
tradesbook
filter_trades
i
stock_list
stock_list[2]
rm(list = ls())
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
setwd("C:/Users/Mary/Documents/GitHub/APS490RBCCMM")
rm(list = ls())
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
getwd()
source('constants.r')
source('strategy_lib.r')
source('constants.r')
source('strategy_lib.r')
getwd()
source('strategy_lib.r')
source('strategy_lib.r')
rm(list = ls())
getwd()
setwd("C:/Users/Mary/Documents/GitHub/APS490RBCCM")
source('constants.r')
source('strategy_lib.r')
starttime + 60 * (0: 420)
