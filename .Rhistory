# of the prices into a single value, does not predict any behavior.
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes),v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else(x)
}
# describe the current pricing patterns by the use of 8 technical indicators.
# These technical indicators were narrowed down by a random forest strategy
# (not shown) and will be used to predict the T indicator at a future date
myATR <- function(x) ATR(HLC(x))[,'atr']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
myMACD <- function(x) MACD(Cl(x))[,2]
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) + myEMV(GSPC) + myVolat(GSPC)
+ myMACD(GSPC) + mySAR(GSPC) + runMean(Cl(GSPC)))
# use the feature set to predict 1) the correct value of T at the current day
# (which will be translated to a buy, hold, or sell signal via a set
# threshold) or 2) the correct buy, hold, or sell signal directly
# determine the training (20 years) and test set (10 years). For each data
# frame, each indicator that we chose for our feature set is calculated for
# each day.
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
'1999-12-31')))
head(Tdata.train)
library(xts)
library(tseries)
library(quantmod)
library(DMwR)
setSymbolLookup(GSPC=list(name = "GSPC", src = "yahoo"))
getSymbols("GSPC")
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes),v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else(x)
}
myATR <- function(x) ATR(HLC(x))[,'atr']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
myMACD <- function(x) MACD(Cl(x))[,2]
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) + myEMV(GSPC) + myVolat(GSPC)
+ myMACD(GSPC) + mySAR(GSPC) + runMean(Cl(GSPC)))
library(xts)
library("DMwR")
library(tseries)
GSPC <- as.xts(get.hist.quote("^GSPC",
start="1970-01-02",end='2009-09-15',
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
library(quantmod)
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
## The following statment is wrong in the book (page 109)!
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes)[,1],v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else x
}
myATR <- function(x) ATR(HLC(x))[,'atr']
mySMI <- function(x) SMI(HLC(x))[,'SMI']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myAroon <- function(x) aroon(x[,c('High','Low')])$oscillator
myBB <- function(x) BBands(HLC(x))[,'pctB']
myChaikinVol <- function(x) Delt(chaikinVolatility(x[,c("High","Low")]))[,1]
myCLV <- function(x) EMA(CLV(HLC(x)))[,1]
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myMACD <- function(x) MACD(Cl(x))[,2]
myMFI <- function(x) MFI(x[,c("High","Low","Close")], x[,"Volume"])
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
data(GSPC)
library(randomForest)
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC)  + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC)  + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
set.seed(1234)
rf <- buildModel(data.model,method='randomForest',
training.per=c(start(GSPC),index(GSPC["1999-12-31"])),
ntree=50, importance=T)
varImpPlot(rf@fitted.model, type = 1)
imp <- importance(rf@fitted.model, type = 1)
rownames(imp)[which(imp > 10)]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) +    myEMV(GSPC) + myVolat(GSPC)  + myMACD(GSPC)
+ mySAR(GSPC) + runMean(Cl(GSPC)) )
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
'1999-12-31')))
head(Tdata.train)
head(GSPC)
head(T.ind(GSPC))
Tdata.train
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1999-12-31')))
head(Tdata.train)
library(xts)
library("DMwR")
### STEP1
library(tseries)
GSPC <- as.xts(get.hist.quote("^GSPC",
start="1970-01-02",end='2009-09-15',
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
### STEP2
library(quantmod)
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
## The following statment is wrong in the book (page 109)!
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes)[,1],v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else x
}
myATR <- function(x) ATR(HLC(x))[,'atr']
mySMI <- function(x) SMI(HLC(x))[,'SMI']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myAroon <- function(x) aroon(x[,c('High','Low')])$oscillator
myBB <- function(x) BBands(HLC(x))[,'pctB']
myChaikinVol <- function(x) Delt(chaikinVolatility(x[,c("High","Low")]))[,1]
myCLV <- function(x) EMA(CLV(HLC(x)))[,1]
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myMACD <- function(x) MACD(Cl(x))[,2]
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
myMFI <- function(x) MFI(x[,c("High","Low","Close")], x[,"Volume"])
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
data(GSPC)
library(randomForest)
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC)  + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC)  + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
set.seed(1234)
rf <- buildModel(data.model,method='randomForest',
training.per=c(start(GSPC),index(GSPC["1999-12-31"])),
ntree=50, importance=T)
varImpPlot(rf@fitted.model, type = 1)
imp <- importance(rf@fitted.model, type = 1)
rownames(imp)[which(imp > 10)]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) +    myEMV(GSPC) + myVolat(GSPC)  + myMACD(GSPC)
+ mySAR(GSPC) + runMean(Cl(GSPC)) )
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1999-12-31')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-02-18','1999-12-31')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1975-02-18','1999-12-31')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1999-12-31')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1970-02-18')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1970-02-17')))
head(Tdata.train)
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
'1999-12-31')))
Tdata.train
head(Tdata.train)
Tdata.eval <- na.omit(as.data.frame(modelData(data.model,
data.window=c('2000-01-01',
'2009-09-15'))))
head(tdata.eval)
head(Tdata.eval)
tail(Tdata.eval)
start <- 1
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# getting the quotes for the testing period
data(GSPC)
date <- rownames(Tdata.train[start+len.tr,])
market <- GSPC[paste(date,'/',sep='')][1:len.ts]
market
head(Tdata.train[tr,])
tail(Tdata.train[tr,])
head(Tdata.train[ts,])
tail(Tdata.train[ts,])
library(XLConnect)
env[["AC_tick"]] <- read.csv("AC_tick.csv")
env[["AC_tick"]]$Date <- as.POSIXct(env[["AC_tick"]]$Date)
source('constants.r')
setwd("C:/Users/Mary/Documents/GitHub/APS490RBCCM")
source('constants.r')
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
env <- global_tables
env[["AC_tick"]] <- read.csv("AC_tick.csv")
env[["AC_tick"]]$Date <- as.POSIXct(env[["AC_tick"]]$Date)
AC_tick <- env[["AC_tick"]]
env[["BNS_tick"]] <- read.csv("BNS_tick.csv")
env[["BNS_tick"]]$Date <- as.POSIXct(env[["BNS_tick"]]$Date)
BNS_tick <- env[["BNS_tick"]]
env[["BMO_tick"]] <- read.csv("BMO_tick.csv")
env[["BMO_tick"]]$Date <- as.POSIXct(env[["BMO_tick"]]$Date)
BMO_tick <- env[["BMO_tick"]]
Stocks <- c("AC", "BNS", "BMO")
#EquityList <- c("tick", "ask", "bid")
EquityList <- c("tick")
# removes N/A fields and only keeps times when the market is open
for (i in Stocks){
for (Name in EquityList){
nm <- paste(i,Name,sep="_")
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
row_to_keep <- logical(length = nrow(env[[nm]]) )
maxrow <- nrow(env[[nm]])
env[[nm]] = env[[nm]][complete.cases(env[[nm]][1:maxrow,] ) ,]
for (j in 1:nrow(env[[nm]])){
temp <- strftime(env[[nm]][j,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[j] <- TRUE
} else{
row_to_keep[j] <- FALSE
}
}
env[[nm]] = env[[nm]][row_to_keep,]
assign(paste(i,Name,sep="_"), env[[nm]])
}
}
k <- 1
for (h in Stocks){
for (Name in EquityList){
nm <- paste(h,Name,sep="_")
end <- nrow(env[[nm]])
while (k < end) {
if (as.Date(env[[nm]][k, "Date"]) == as.Date(env[[nm]][k+1, "Date"])){
if (env[[nm]][k+1,"Date"] != (env[[nm]][k,"Date"] + 60)){
my.vec <- as.data.frame(rep(env[[nm]][k,], 1))
my.vec[1, "Date"] <- env[[nm]][k, "Date"] + 60
new.df <- rbind(env[[nm]][1:k, ], my.vec, env[[nm]][(k+1):nrow(env[[nm]]), ])
row.names(new.df) <- 1:nrow(new.df)
env[[nm]] <- new.df
k <- k + 1
}
}
end <- nrow(env[[nm]])
k <- k + 1
}
}
}
AC_tick <- env[["AC_tick"]]
BNS_tick <- env[["BNS_tick"]]
BMO_tick <- env[["BMO_tick"]]
nm
View(BMO_tick)
View(AC_tick)
View(BNS_tick)
for (h in Stocks){
k <- 1
for (Name in EquityList){
nm <- paste(h,Name,sep="_")
end <- nrow(env[[nm]])
while (k < end) {
if (as.Date(env[[nm]][k, "Date"]) == as.Date(env[[nm]][k+1, "Date"])){
if (env[[nm]][k+1,"Date"] != (env[[nm]][k,"Date"] + 60)){
my.vec <- as.data.frame(rep(env[[nm]][k,], 1))
my.vec[1, "Date"] <- env[[nm]][k, "Date"] + 60
new.df <- rbind(env[[nm]][1:k, ], my.vec, env[[nm]][(k+1):nrow(env[[nm]]), ])
row.names(new.df) <- 1:nrow(new.df)
env[[nm]] <- new.df
k <- k + 1
}
}
end <- nrow(env[[nm]])
k <- k + 1
}
}
}
AC_tick <- env[["AC_tick"]]
BNS_tick <- env[["BNS_tick"]]
BMO_tick <- env[["BMO_tick"]]
View(AC_tick)
View(BMO_tick)
View(BNS_tick)
as.Date(AC_tick[1:100, 1])
my_df <- as.data.frame(unique(as.Date(AC_tick[,1])))
View(my_df)
my_df <- as.data.frame(unique(as.Date(BMO_tick[,1])))
View(my_df)
my_df <- as.data.frame(unique(as.Date(BNS_tick[,1])))
new_AC <- AC_tick[1:388,]
View(new_AC)
new_df <- data.frame(AC = AC_tick[1:388,], BNS = BNS_tick[1:390], BMO = BMO_tick[1:390])
new_df <- data.frame(AC = AC_tick[1:388,], BNS = BNS_tick[1:390,], BMO = BMO_tick[1:390,])
new_df <- data.frame(AC = AC_tick[1:390,], BNS = BNS_tick[1:390,], BMO = BMO_tick[1:390,])
View(new_df)
new_df <- data.frame(AC = AC_tick[1:390,1], BNS = BNS_tick[1:390,1], BMO = BMO_tick[1:390,1])
st_date <- "2015-05-13 09:30:00"
st_date + 1
st_date <- as.POSIXct(2015-05-13 09:30:00, origin = "1970-01-01")
st_date <- as.POSIXct("2015-05-13 09:30:00", origin = "1970-01-01")
st_date + 1
st_date + 60
st_date <- as.POSIXct("2015-05-13 09:30:00", origin = "1970-01-01")
for (i in 1:52650){
list_date_times[i] <- st_date
st_date + 60
}
list_date_times <- data.frame()
for (i in 1:52650){
list_date_times[i] <- st_date
st_date + 60
}
list_date_times <- c()
for (i in 1:52650){
list_date_times[i] <- st_date
st_date + 60
}
list_date_times <- as.data.frame(list_date_times)
View(list_date_times)
st_date
View(list_date_times)
st_date <- as.POSIXct("2015-05-13 09:30:00", origin = "1970-01-01")
list_date_times <- c()
for (i in 1:52650){
list_date_times[i] <- st_date
st_date <- st_date + 60
}
list_date_times <- as.data.frame(list_date_times)
list_date_times[,1] <- as.POSIXct(list_date_times[,1], origin = "1907-01-01")
strftime(list_date_times[1])
st_date <- as.POSIXct("2015-05-13 09:30:00", origin = "1970-01-01")
list_date_times <- c()
st_date <- as.POSIXct("2015-05-13 09:30:00", origin = "1970-01-01")
list_date_times <- c()
for (i in 1:52650){
list_date_times[i] <- st_date
if (strftime(list_date_times[i], format="%H:%M:%S") != "15:59:00"){
st_date <- st_date + 60
}
else {
st_date <- st_date + 63060
}
}
list_date_times[1]
st_date
as.POSIXct(list_date_times[1], origin = "1970-01-01")
strftime(as.POSIXct(list_date_times[i], origin = "1970-01-01"), format="%H:%M:%S")
st_date <- as.POSIXct("2015-05-13 09:30:00", origin = "1970-01-01")
list_date_times <- c()
for (i in 1:52650){
list_date_times[i] <- st_date
if (strftime(as.POSIXct(list_date_times[i], origin = "1970-01-01"), format="%H:%M:%S") != "15:59:00"){
st_date <- st_date + 60
}
else {
st_date <- st_date + 63060
}
}
list_date_times <- as.data.frame(list_date_times)
list_date_times[,1] <- as.POSIXct(list_date_times[,1], origin = "1907-01-01")
list_date_times[,1] <- as.POSIXct(list_date_times[,1], origin = "1970-01-01")
st_date <- as.POSIXct("2015-05-13 09:30:00", origin = "1970-01-01")
st_date
list_date_times <- c()
for (i in 1:52650){
list_date_times[i] <- st_date
if (strftime(as.POSIXct(list_date_times[i], origin = "1970-01-01"), format="%H:%M:%S") != "15:59:00"){
st_date <- st_date + 60
}
else {
st_date <- st_date + 63060
}
}
list_date_times <- as.data.frame(list_date_times)
View(list_date_times)
list_date_times[,1] <- as.POSIXct(list_date_times[,1], origin = "1970-01-01")
env[["AC_tick"]] <- read.csv("AC_tick.csv")
env[["AC_tick"]]$Date <- as.POSIXct(env[["AC_tick"]]$Date)
AC_tick <- env[["AC_tick"]]
env[["BNS_tick"]] <- read.csv("BNS_tick.csv")
env[["BNS_tick"]]$Date <- as.POSIXct(env[["BNS_tick"]]$Date)
BNS_tick <- env[["BNS_tick"]]
env[["BMO_tick"]] <- read.csv("BMO_tick.csv")
env[["BMO_tick"]]$Date <- as.POSIXct(env[["BMO_tick"]]$Date)
BMO_tick <- env[["BMO_tick"]]
Stocks <- c("AC", "BNS", "BMO")
#EquityList <- c("tick", "ask", "bid")
EquityList <- c("tick")
# removes N/A fields and only keeps times when the market is open
for (i in Stocks){
for (Name in EquityList){
nm <- paste(i,Name,sep="_")
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
row_to_keep <- logical(length = nrow(env[[nm]]) )
maxrow <- nrow(env[[nm]])
env[[nm]] = env[[nm]][complete.cases(env[[nm]][1:maxrow,] ) ,]
for (j in 1:nrow(env[[nm]])){
temp <- strftime(env[[nm]][j,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[j] <- TRUE
} else{
row_to_keep[j] <- FALSE
}
}
env[[nm]] = env[[nm]][row_to_keep,]
assign(paste(i,Name,sep="_"), env[[nm]])
}
}
unique(as.Date(AC_tick[, 1]))
list_date[1]
list_dates <- unique(as.Date(AC_tick[, 1]))
list_dates[1]
list_dates[1]&"09:30:00"
paste(list_dates[1], "09:30:00")
as.POSIXct(paste(list_dates[1], "09:30:00"))
as.POSIXct(paste(list_dates[1], "09:30:00")) + 60
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
source('constants.r')
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
data_extraction <- function(filename, env, symbol, tick_name, bid_name, ask_name)
{
#Definition: This function creates tables (tick, bid and ask) of stock prices. It imports stock price data from an Excel file that links to the Bloomberg terminal.
#Requirements:
#The excel sheet contains 3 tables arranged in order: Tick, Ask, Bid price.
#Number of columns in each table can vary
file <- readWorksheetFromFile(filename,
sheet= symbol,
startRow = 3,
check.names = FALSE
)
#file <- read.xlsx(filename, sheet= symbol, startRow = 3,check.names = FALSE)
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
env[[tick_name]] = file[, mylist[1]:   (mylist[2] - 1)]
env[[bid_name]]  = file[,(mylist[2]+1):(mylist[3] - 1)]
env[[ask_name]]  = file[,(mylist[3]+1):length(file)]
# only consider complete cases (remove NA)
#env[[bid_name]][complete.cases(env[[bid_name]]),]
#env[[ask_name]][complete.cases(env[[ask_name]]),]
}
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
library(XLConnect)
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
global_tables$positionbook
