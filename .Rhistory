#update the position tables & trades table
tradesbook_name <- Con_GlobalVarName_TradesBook
positionbook <- env[[Con_GlobalVarName_PositionBook]]
last_pos <- positionbook[[length(positionbook)]]
new_pos <- last_pos
previous_cash <- new_pos[new_pos[, Con_FieldName_Sym]== Con_Sym_Cash, Con_FieldName_Qty]
cash_change <- 0
for (i in 1:nrow(fill_msgs)){
fill_sym <- fill_msgs[i, Con_FieldName_Sym]
fill_side <- fill_msgs[i, Con_FieldName_Side]
fill_qty <- fill_msgs[i, Con_FieldName_Qty]
fill_price <- fill_msgs[i, Con_FieldName_AvgPrice]
cash_change <- cash_change + (fill_side == Con_Side_Sell) * fill_qty * fill_price - (fill_side == Con_Side_Buy) * fill_qty * fill_price
#cat("hi", length((1:nrow(new_pos))[new_pos[,Con_FieldName_Sym] == fill_sym]), "\n")
if (length((1:nrow(new_pos))[new_pos[,Con_FieldName_Sym] == fill_sym]) == 0){
#no positions exist for this symbol yet
new_line_index <- nrow(new_pos) + 1
new_pos[new_line_index, Con_FieldName_Sym] <- fill_sym
new_pos[new_line_index, Con_FieldName_Qty] <- ((fill_side == Con_Side_Buy) * fill_qty
- (fill_side == Con_Side_Sell) * fill_qty)
new_pos[new_line_index, Con_FieldName_BookVal] <- new_pos[new_line_index, Con_FieldName_Qty] * fill_price
new_pos[new_line_index, Con_FieldName_MktVal] <- new_pos[new_line_index, Con_FieldName_BookVal]
#update the trades table
insert_into_tradesbook(env, tradesbook_name, time = timestamp, sym = fill_sym,
side = fill_side, qty = fill_qty, price = fill_price,
openclose = Con_OpenClose_Open, pnl = NA)
}
else{
#positions exist for this symbol
index <- (1:nrow(new_pos))[new_pos[,Con_FieldName_Sym] == fill_msgs[i, Con_FieldName_Sym]][1]
orig_quantity <- new_pos[index, Con_FieldName_Qty]
orig_bkval <- new_pos[index, Con_FieldName_BookVal]
new_pos[index, Con_FieldName_Qty] <- (orig_quantity +
(fill_side == Con_Side_Buy) * fill_qty
- (fill_side == Con_Side_Sell) * fill_qty)
new_pos[index, Con_FieldName_MktVal] <- new_pos[index, Con_FieldName_Qty] * fill_price
new_pos[index, Con_FieldName_BookVal] <- (new_pos[index, Con_FieldName_BookVal] +
((fill_side == Con_Side_Buy) * fill_qty
- (fill_side == Con_Side_Sell) * fill_qty) * fill_price)
oc <- Con_OpenClose_Open
pnl <- NA
quantity <- fill_qty
if ((orig_quantity < 0 & fill_side == Con_Side_Buy) | (orig_quantity > 0 & fill_side == Con_Side_Sell)){
#the execution offsets a closes some positions
if ((new_pos[index, Con_FieldName_Qty] > 0 & fill_side == Con_Side_Buy) |
(new_pos[index, Con_FieldName_Qty] < 0 & fill_side == Con_Side_Sell)){
#if the execution opens up an position as well
opposite_pos_qty <- new_pos[index, Con_FieldName_Qty]
oc = Con_OpenClose_Close
pnl = -(orig_quantity) * (orig_bkval/orig_quantity - fill_price)
new_pos[index, Con_FieldName_BookVal] <- new_pos[index, Con_FieldName_BookVal] + pnl
quantity <- abs(orig_quantity)
#cat(quantity, " ", orig_bkval, " ", orig_quantity, " ", orig_bkval/orig_quantity, " ", fill_price, " ", pnl, "\n")
insert_into_tradesbook(env, tradesbook_name, time = timestamp, sym = fill_sym,
side = fill_side, qty = opposite_pos_qty, price = fill_price,
openclose = Con_OpenClose_Open, pnl = NA)
}
else{
oc = Con_OpenClose_Close
pnl = (((fill_side == Con_Side_Buy) * fill_qty - (fill_side == Con_Side_Sell) * fill_qty)
* (orig_bkval/orig_quantity - fill_price))
new_pos[index, Con_FieldName_BookVal] <- new_pos[index, Con_FieldName_BookVal] + pnl
#cat(fill_qty, " ", orig_mktval, " ", orig_quantity, " ", orig_mktval/orig_quantity, " ", fill_price, " ", pnl, "\n")
}
}
insert_into_tradesbook(env, tradesbook_name, time = timestamp, sym = fill_sym,
side = fill_side, qty = quantity, price = fill_price,
openclose = oc, pnl = pnl)
}
}
#if position is flat remove this line
new_pos <- new_pos[!new_pos[,Con_FieldName_Qty] == 0,]
new_pos[new_pos[, Con_FieldName_Sym]== Con_Sym_Cash, c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] <- previous_cash + cash_change
positionbook[[length(positionbook) + 1]] <- new_pos
names(positionbook)[length(positionbook)] <- timestamp
env[[Con_GlobalVarName_PositionBook]] <- positionbook
}
#untested new orders, cancel and replace not implemented
handle_orders <- function (orders, symbol, env, timestamp){
#orderbook is a referene (pointer in an environment), and changes are meant to be permanent
#handles all orders (new, replace, cancels) and update the order book approriately
#returns execution messages
quotes <- getquotes(env, symbol, timestamp)
new_orders <- orders[orders[,Con_FieldName_MsgType] == Con_MsgType_New,]
replace_orders <- orders[orders[,Con_FieldName_MsgType] == Con_MsgType_Replace,]
cancel_orders <- orders[orders[,Con_FieldName_MsgType] == Con_MsgType_Cancel,]
mkt_new <- new_orders[new_orders[,Con_FieldName_OrdType] == Con_OrdType_Mkt, ]
mkt_order_symbols <- mkt_new[, Con_FieldName_Sym]
dim(mkt_order_symbols) <- length(mkt_order_symbols)
mkt_ask <- apply(mkt_order_symbols, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_CurrentAsk])})
mkt_bid <- apply(mkt_order_symbols, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_CurrentBid])})
mkt_exec_prices <- (mkt_new[, Con_FieldName_Side] == Con_Side_Buy ) * mkt_ask +
(mkt_new[, Con_FieldName_Side] == Con_Side_Sell ) * mkt_bid
limit_new <- new_orders[new_orders[,Con_FieldName_OrdType] == Con_OrdType_Limit, ]
lmt_order_symbols <- limit_new[, Con_FieldName_Sym]
dim(lmt_order_symbols) <- length(lmt_order_symbols)
lmt_ask <- apply(lmt_order_symbols, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_CurrentAsk])})
lmt_bid <- apply(lmt_order_symbols, 1, function (sym) {return (quotes[quotes[,Con_FieldName_Sym] == sym, Con_FieldName_CurrentBid])})
mkt_lmt_orders_indices <- (limit_new[,Con_FieldName_Price] >= lmt_ask & limit_new[,Con_FieldName_Side] == Con_Side_Buy) |(limit_new[,Con_FieldName_Price] <= lmt_bid & limit_new[,Con_FieldName_Side] == Con_Side_Sell)
mkt_lmt_orders <- limit_new[mkt_lmt_orders_indices,]
mkt_lmt_ask <- lmt_ask[mkt_lmt_orders_indices]
mkt_lmt_bid <- lmt_bid[mkt_lmt_orders_indices]
mkt_lmt_prices <- (mkt_lmt_orders[, Con_FieldName_Side] == Con_Side_Buy ) * mkt_lmt_ask +
(mkt_lmt_orders[, Con_FieldName_Side] == Con_Side_Sell ) * mkt_lmt_bid
insert_into_orderbook(limit_new, env, Con_GlobalVarName_LOB)
exec_replace <- handle_replaces(replace_orders, orderbook, timestamp)
exec_cancel <- handle_cancels(cancel_orders, orderbook, timestamp)
#fill must come after replace and cancel has been handled
exec_fill <- rbind(generate_fill_msgs(mkt_new, mkt_exec_prices, timestamp), generate_fill_msgs(mkt_lmt_orders, mkt_lmt_prices, timestamp))
update_trades_pnl_tables(exec_fill, env, timestamp)
return(rbind(exec_replace, exec_cancel, exec_fill))
}
#tested
generate_fill_msgs <- function(ready_orders_list, exec_price, timestamp){
fill_msgs <- data.frame(matrix(0, nrow(ready_orders_list), length(exec_msg_spec)))
colnames(fill_msgs) <- exec_msg_spec
fill_msgs[, Con_FieldName_OrdID] <- ready_orders_list[, Con_FieldName_OrdID]
fill_msgs[, Con_FieldName_ExecStatus] <- rep(Con_ExecStatus_filled, nrow(ready_orders_list))
fill_msgs[, Con_FieldName_Sym] <- ready_orders_list[, Con_FieldName_Sym]
fill_msgs[, Con_FieldName_Qty] <- ready_orders_list[, Con_FieldName_Qty]
fill_msgs[, Con_FieldName_AvgPrice] <- exec_price
fill_msgs[, Con_FieldName_Side] <- ready_orders_list[, Con_FieldName_Side]
fill_msgs[, Con_FieldName_Time] <- rep(timestamp, nrow(ready_orders_list))
return (fill_msgs)
}
#tested
insert_into_orderbook <-function(limit_orders, env, orderbook_name){
#orderbook is a referene (pointer in an environment), and changes are meant to be permanent
#insert limit orders into orderbook, return nothing
new_entries <- data.frame((matrix(0, nrow(limit_orders), length(orderbook_spec))))
colnames(new_entries) <- orderbook_spec
new_entries[, Con_FieldName_OrdID] <- limit_orders[, Con_FieldName_OrdID]
new_entries[, Con_FieldName_Time] <- limit_orders[, Con_FieldName_Time]
new_entries[, Con_FieldName_Sym] <- limit_orders[, Con_FieldName_Sym]
new_entries[, Con_FieldName_Price] <- limit_orders[, Con_FieldName_Price]
new_entries[, Con_FieldName_Qty] <- limit_orders[, Con_FieldName_Qty]
new_entries[, Con_FieldName_Side] <- limit_orders[, Con_FieldName_Side]
new_entries[, Con_FieldName_OrdType] <- limit_orders[, Con_FieldName_OrdType]
env[[orderbook_name]] <- rbind(env[[orderbook_name]], new_entries)
}
#tested
insert_into_tradesbook <- function(env, tradesbook_name, time, sym, qty, side, price, openclose, pnl){
new_line_index <- nrow(env[[tradesbook_name]]) + 1
env[[tradesbook_name]][new_line_index, Con_FieldName_Time] <- time
env[[tradesbook_name]][new_line_index, Con_FieldName_Sym] <- sym
env[[tradesbook_name]][new_line_index, Con_FieldName_Side] <- side
env[[tradesbook_name]][new_line_index, Con_FieldName_Qty] <- qty
env[[tradesbook_name]][new_line_index, Con_FieldName_Price] <- price
env[[tradesbook_name]][new_line_index, Con_FieldName_OpenClose] <- openclose
env[[tradesbook_name]][new_line_index, Con_FieldName_Pnl] <- pnl
}
handle_cancels <- function(cancelorders, orderbook, timestamp){
#returns execution messages
#cat(cancelorders)
}
handle_replaces <- function(replaceorders, orderbook, timestamp){
#returns execution messages
}
get_time_since_open <- function(timestamp){
if (strftime(timestamp, format = "%Z") == "EDT")
return ((as.numeric(timestamp) %% 86400) - 48600)
else
return ((as.numeric(timestamp) %% 86400) - 52200)
}
# ################################################
source('constants.r')
source('data_cleaning.r')
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
datafile_name = "../data/TSXdatafile.xls"
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
import_data(global_tables)
debugSource('E:/YEAR 4/Code/APS490RBCCM/function file2.R')
strategy_ipr(global_tables)
currposition
stock
totalvalue
totalvalue
stock
totalvalue
a
global_tables$positionbook
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
strategy_ipr(global_tables)
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
strategy_ipr(global_tables)
source('E:/YEAR 4/Code/APS490RBCCM/function file2.R')
strategy_ipr(global_tables)
global_tables$positionbook
source('E:/YEAR 4/Code/APS490RBCCM/function file2.R')
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
strategy_ipr(global_tables)
source('E:/YEAR 4/Code/APS490RBCCM/function file2.R')
strategy_ipr(global_tables)
global_tables$positionbook
source('E:/YEAR 4/Code/APS490RBCCM/function file2.R')
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
strategy_ipr(global_tables)
global_tables$positionboko
global_tables$positionbook
source('E:/YEAR 4/Code/APS490RBCCM/function file2.R')
strategy_ipr(global_tables)
global_tables$positionbook
cat("\014")
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
source('E:/YEAR 4/Code/APS490RBCCM/function file2.R')
strategy_ipr(global_tables)
global_tables$positionbook
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
strategy_ipr(global_tables)
global_tables$positionbook
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
source('E:/YEAR 4/Code/APS490RBCCM/function file2.R')
strategy_ipr(global_tables)
global_tables$positionbook
global_tables$tradesbook
positionbook <- do.call(rbind, positionbook)
tradesbook <- global_tables$tradesbook
positionbook <- global_tables$positionbook
positionbook <- do.call(rbind, positionbook)
positionbook <- cbind(Timestamp = rownames(positionbook), positionbook)
rownames(positionbook) <- 1:nrow(positionbook)
positionbook$Timestamp <- sapply(strsplit(as.character(positionbook$Timestamp),".",fixed = TRUE), "[[", 1)
View(positionbook)
# output <- function(tradesbook, positionbook, ask_prices, bid_prices, market_data){
EquityList <- c("tick", "ask", "bid")
### TESTED
tradesbook <- global_tables$tradesbook
# manually add a row into the tradebook since the naive strategy doesn't empty inventory at end of session
positionbook <- global_tables$positionbook
### TESTED
### TESTED
# manipulate positionbook to make it a dataframe (it is received as a list)
positionbook <- do.call(rbind, positionbook)
positionbook <- cbind(Timestamp = rownames(positionbook), positionbook)
rownames(positionbook) <- 1:nrow(positionbook)
positionbook$Timestamp <- sapply(strsplit(as.character(positionbook$Timestamp),".",fixed = TRUE), "[[", 1)
ask_prices <- global_tables$ask_price
bid_prices <- global_tables$bid_price
### TESTED
### TESTED
# find the unique stocks that have been traded over the duration
stock_list <- unique(as.vector(tradesbook$Symbol))
# Set up the data frame which will store the cumulative pnl values for each stock and portfolio
Pnl_df <- data.frame(Symbol=character(), DateTime=as.Date(character()), BidAskPrice=character(),
BookValue=integer(), Side=integer(), Quantity = integer(),
Open.Close = character(), PnLStock = integer(), Cash = integer(),
Portfolio = integer(), PnLPortfolio = integer())
### TESTED
### TESTED
# loop through all the stocks that have been traded
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
# filter the tradesbook for only the selected stock
filtered_tradesbook <- subset(tradesbook, Symbol == stock_name)
# loop through all the trades made in the tradesbook
for (j in 1:nrow(filtered_tradesbook)){
curr_side <- filtered_tradesbook$Side[j]
curr_pos <- filtered_tradesbook$`Open/Close`[j]
start_time_date_unix <- as.character(filtered_tradesbook[j, "Timestamp"])
end_time_date_unix <- as.character(filtered_tradesbook[j + 1, "Timestamp"])
start_time_date <- as.POSIXct(as.numeric(filtered_tradesbook[j, "Timestamp"]), origin="1970-01-01")
end_time_date <- as.POSIXct(as.numeric(filtered_tradesbook[j + 1, "Timestamp"]), origin="1970-01-01")
book_value <- positionbook[positionbook$Timestamp == start_time_date_unix & positionbook$Symbol == stock_name, ]["BookValue"]
qty_owned <- positionbook[positionbook$Timestamp == start_time_date_unix & positionbook$Symbol == stock_name, ]["Quantity"]
if (curr_side == 1 && curr_pos == "Open"){
# add part in future if trading more than one stock, must access the correct market data
# depending on what the value of stock_name is
stock_data <- paste(stock_name,EquityList[2],sep="_")
stock_matrix <- env[[stock_data]]
type <- "bid"
} else if (curr_side == 2 && curr_pos == "Open"){
stock_data <- paste(stock_name,EquityList[3],sep="_")
stock_matrix <- env[[stock_data]]
type <- "ask"
} else if (curr_pos == "Close") {
next
}
for (i in 1:NROW(stock_matrix)){
if (stock_matrix[i, "Date"] > end_time_date) {
break
} else if (stock_matrix[i,"Date"] >= start_time_date){
# must clarify what price would we realize profits at (i.e what is market value at a given time)
# add part in future if trading more than one stock, must access the correct market data
# depending on what the value of stock_name is
if (type == "ask") {
bidask_price <- ask_prices[i, "LOW"]
} else {
bidask_price <- bid_prices[i, "HIGH"]
}
if (stock_matrix[i, "Date"] == end_time_date) {
curr_pos <- "Close"
if (curr_side == 1){
curr_side == 2
} else {
curr_side == 1
}
}
Pnl_df <- rbind(Pnl_df, data.frame(Symbol = stock_name, DateTime = stock_matrix[i, "Date"],
BidAskPrice = bidask_price,
BookValue = book_value, Side = curr_side,
Quantity = qty_owned, OpenClose = curr_pos))
}
}
}
}
# output <- function(tradesbook, positionbook, ask_prices, bid_prices, market_data){
EquityList <- c("tick", "ask", "bid")
env < - global_tables
### TESTED
tradesbook <- global_tables$tradesbook
# manually add a row into the tradebook since the naive strategy doesn't empty inventory at end of session
positionbook <- global_tables$positionbook
### TESTED
### TESTED
# manipulate positionbook to make it a dataframe (it is received as a list)
positionbook <- do.call(rbind, positionbook)
positionbook <- cbind(Timestamp = rownames(positionbook), positionbook)
rownames(positionbook) <- 1:nrow(positionbook)
positionbook$Timestamp <- sapply(strsplit(as.character(positionbook$Timestamp),".",fixed = TRUE), "[[", 1)
ask_prices <- global_tables$ask_price
bid_prices <- global_tables$bid_price
### TESTED
### TESTED
# find the unique stocks that have been traded over the duration
stock_list <- unique(as.vector(tradesbook$Symbol))
# Set up the data frame which will store the cumulative pnl values for each stock and portfolio
Pnl_df <- data.frame(Symbol=character(), DateTime=as.Date(character()), BidAskPrice=character(),
BookValue=integer(), Side=integer(), Quantity = integer(),
Open.Close = character(), PnLStock = integer(), Cash = integer(),
Portfolio = integer(), PnLPortfolio = integer())
### TESTED
### TESTED
# loop through all the stocks that have been traded
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
# filter the tradesbook for only the selected stock
filtered_tradesbook <- subset(tradesbook, Symbol == stock_name)
# loop through all the trades made in the tradesbook
for (j in 1:nrow(filtered_tradesbook)){
curr_side <- filtered_tradesbook$Side[j]
curr_pos <- filtered_tradesbook$`Open/Close`[j]
start_time_date_unix <- as.character(filtered_tradesbook[j, "Timestamp"])
end_time_date_unix <- as.character(filtered_tradesbook[j + 1, "Timestamp"])
start_time_date <- as.POSIXct(as.numeric(filtered_tradesbook[j, "Timestamp"]), origin="1970-01-01")
end_time_date <- as.POSIXct(as.numeric(filtered_tradesbook[j + 1, "Timestamp"]), origin="1970-01-01")
book_value <- positionbook[positionbook$Timestamp == start_time_date_unix & positionbook$Symbol == stock_name, ]["BookValue"]
qty_owned <- positionbook[positionbook$Timestamp == start_time_date_unix & positionbook$Symbol == stock_name, ]["Quantity"]
if (curr_side == 1 && curr_pos == "Open"){
# add part in future if trading more than one stock, must access the correct market data
# depending on what the value of stock_name is
stock_data <- paste(stock_name,EquityList[2],sep="_")
stock_matrix <- env[[stock_data]]
type <- "bid"
} else if (curr_side == 2 && curr_pos == "Open"){
stock_data <- paste(stock_name,EquityList[3],sep="_")
stock_matrix <- env[[stock_data]]
type <- "ask"
} else if (curr_pos == "Close") {
next
}
for (i in 1:NROW(stock_matrix)){
if (stock_matrix[i, "Date"] > end_time_date) {
break
} else if (stock_matrix[i,"Date"] >= start_time_date){
# must clarify what price would we realize profits at (i.e what is market value at a given time)
# add part in future if trading more than one stock, must access the correct market data
# depending on what the value of stock_name is
if (type == "ask") {
bidask_price <- ask_prices[i, "LOW"]
} else {
bidask_price <- bid_prices[i, "HIGH"]
}
if (stock_matrix[i, "Date"] == end_time_date) {
curr_pos <- "Close"
if (curr_side == 1){
curr_side == 2
} else {
curr_side == 1
}
}
Pnl_df <- rbind(Pnl_df, data.frame(Symbol = stock_name, DateTime = stock_matrix[i, "Date"],
BidAskPrice = bidask_price,
BookValue = book_value, Side = curr_side,
Quantity = qty_owned, OpenClose = curr_pos))
}
}
}
}
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
# filter the tradesbook for only the selected stock
filtered_tradesbook <- subset(tradesbook, Symbol == stock_name)
