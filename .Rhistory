}
}
}
### TESTED
### TESTED
# calculate cumulative portfolio pnl at each time step
for (i in 1:NROW(time_list)){
curr_pnl <- time_list[i, "PortfolioValue"] - init_cash
time_list[i, "PnLPortfolio"] <- curr_pnl
}
dt <- c(0, time_list[, "PnLPortfolio"])
time_list[, "CumPnLPortfolio"] <- cumsum(time_list[, "PnLPortfolio"])
library(fTrading)
mxdrwdown <- maxDrawDown(time_list$CumPnLPortfolio)
mxdrwdown
class(time_list$CumPnLPortfolio)
library(tseries)
mxdrwdown <- maxdrawdown(time_list$PnLPortfolio)
mxdrwdown
mxdrwdown <- maxdrawdown(time_list$CumPnLPortfolio)
mxdrwdown
mxdrwdown <- maxdrawdown(time_list$PortfolioValue)
mxdrwdown
mxdrwdown <- 0
mxdrwdown <- maxdrawdown(time_list$PortfolioValue)
mxdrwdown
mxdrwdown <- 0
library(fTrading)
mxdrwdown <- maxDrawDown(time_list$PortfolioValue)
mxdrwdown
test <- c(500,750,400,600,350,800)
mxdrwdown <- maxDrawDown(test)
mxdrwdown
library(tseries)
mxdrwdown <- maxdrawdown(time_list$PortfolioValue)
mxdrwdown
MDD_peak <- max(MDD_from, MDD_peak)
library(tseries)
mxdrwdown <- maxdrawdown(time_list$PortfolioValue)
MDD <- mxdrwdown$maxdrawdown
MDD_from <- mxdrwdown$from
MDD_to <- mxdrwdown$to
MDD_peak <- max(MDD_from, MDD_peak)
MDD_peak <- max(c(MDD_from, MDD_peak))
MDD_peak <- max(c(MDD_from, MDD_to))
library(tseries)
mxdrwdown <- maxdrawdown(time_list$PortfolioValue)
MDD <- mxdrwdown$maxdrawdown
MDD_from <- mxdrwdown$from
MDD_to <- mxdrwdown$to
MDD_peak <- max(c(MDD_from, MDD_to))
MDD_trough <- min(c(MDD_from, MDD_to))
MDD_from
mxdrwdown
MDD_from <- time_list[mxdrwdown$from, "PortfolioValue"]
MDD_from
MDD_from <- time_list[mxdrwdown$from, "PortfolioValue"]
MDD_to <- time_list[mxdrwdown$to, "PortfolioValue"]
MDD_peak <- max(c(MDD_from, MDD_to))
MDD_trough <- min(c(MDD_from, MDD_to))
MDD_perc <- (MDD_trough - MDD_peak)/(MDD_peak)
MDD_perc
MDD_perc <- (MDD_trough - MDD_peak)/(MDD_peak)*100
MDD_perc
MDD_trough
MDD_peak
MDD_period <- c(time_list[mxdrwdown$from, "DateTime"], time_list[mxdrwdown$to, "DateTime"])
MDD_period
end_cash <- Pnl_df[NROW(Pnl_df), "Cash"]
return1 <- ((end_cash - init_cash)/(init_cash))*100
return1
# output <- function(tradesbook, positionbook, ask_prices, bid_prices, market_data){
# note to edit portfolio values for shorts
# since I don't have access to the real dataframes, I created them manually
tradesbook <- read.csv("tradesbook.csv", header = TRUE)
positionbook <- read.csv("positionbook.csv", header = TRUE)
# tradesbook <- global_tables$tradesbook
# positionbook <- global_tables$positionbook
# the following are created because the file that data_extraction pulls only carries
# one day's worth of data and I need multiple days. These variables are for testing
# purposes only
ask_prices <- read.csv("ask_AAPL.csv", header = TRUE)
bid_prices <- read.csv("bid_AAPL.csv", header = TRUE)
# ask_prices <- global_tables$ask_price
# bid_prices <- global_tables$bid_price
# convert to date formats
tradesbook$Timestamp <- as.POSIXct(tradesbook$Timestamp)
positionbook$Timestamp <- as.POSIXct(positionbook$Timestamp)
ask_prices$Date <- as.POSIXct(ask_prices$Date)
bid_prices$Date <- as.POSIXct(bid_prices$Date)
# find the unique stocks that have been traded over the duration
stock_list <- unique(as.vector(tradesbook$Symbol))
# Set up the data frame which will store the cumulative pnl values for each stock and portfolio
Pnl_df <- data.frame(Symbol=character(), DateTime=as.Date(character()), BidAskPrice=character(),
BookValue=integer(), Side=integer(), QuantityOwned = integer(),
Open.Close = character(), PnLStock = integer(), Cash = integer(),
Portfolio = integer(), PnLPortfolio = integer())
# loop through all the stocks that have been traded
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
filtered_position <- subset(positionbook, Symbol == stock_name)
filtered_trades <- subset(tradesbook, Symbol == stock_name)
# 1. filter the position and trades table and 2. merge the two because data will be needed
# from both tables
position_trades <- cbind(filtered_position, filtered_trades)
for (j in 1:NROW(position_trades)){
curr_side <- position_trades[j, "Side"]
curr_pos <- position_trades[j, "Open.Close"]
book_value <- position_trades[j, "BookValue"]
start_time_date <- position_trades[j, "Timestamp"]
end_time_date <- position_trades[j + 1, "Timestamp"]
qty_owned <- position_trades[j, "Quantity.Owned"]
# check if there is quantity of stock owned, if there is then go to the ask/bid price
# data frames to access the market values for each time period
if (qty_owned > 0){
if ((curr_side == 1 && curr_pos == "Open") || (curr_side == 1 && curr_pos == "Close")){
# add part in future if trading more than one stock, must access the correct market data
# depending on what the value of stock_name is
# This should be used in real scenarios stock_matrix <- global_tables$ask_price
stock_matrix <- ask_prices
type <- "bid"
} else if ((curr_side == -1 && curr_pos == "Open") || (curr_side == -1 && curr_pos == "Close")){
# This should be used in real scenarios stock_matrix <- global_tables$bid_price
stock_matrix <- bid_prices
type <- "ask"
}
for (i in 1:NROW(stock_matrix)){
if (stock_matrix[i, "Date"] == end_time_date) {
break
} else if (stock_matrix[i,"Date"] >= start_time_date){
# must clarify what price would we realize profits at (i.e what is market value at a given time)
if (type == "ask") {
bidask_price <- stock_matrix[i, "LOW"]
} else {
bidask_price <- stock_matrix[i, "HIGH"]
}
Pnl_df <- rbind(Pnl_df, data.frame(Symbol = stock_name, DateTime = stock_matrix[i, "Date"],
BidAskPrice = bidask_price,
BookValue = book_value, Side = curr_side,
Quantity = qty_owned, OpenClose = curr_pos))
}
}
} else {
next
}
}
}
# calculate the cumulative PnL of each stock
for (i in 1:NROW(Pnl_df)){
curr_symbol <- Pnl_df[i, "Symbol"]
prev_symbol <- Pnl_df[i-1, "Symbol"]
curr_pnl <- (((Pnl_df[i, "BidAskPrice"]-Pnl_df[i, "BookValue"]) / (Pnl_df[i, "BookValue"]))) * 100
if (i ==1) {
Pnl_df[i, "PnLStock"] <- curr_pnl
} else {
if (curr_symbol == prev_symbol){
prev_pnl <- Pnl_df[i-1, "PnLStock"]
} else {
prev_pnl <- 0
}
Pnl_df[i, "PnLStock"] <- prev_pnl + curr_pnl
}
}
# order the Pnl data frame in order of date/time since it is sectioned by symbol
Pnl_df <- Pnl_df[order(Pnl_df$DateTime, decreasing = FALSE), ]
# record the cash in the account at each time step, pulling from the positionbook.
for (i in 1:NROW(Pnl_df)){
curr_date_time <- Pnl_df[i, "DateTime"]
for (j in 2:NROW(positionbook)){
if (positionbook[j, "Timestamp"] == curr_date_time && positionbook[j, "Symbol"] == "Cash"){
Pnl_df[i, "Cash"] <- positionbook[j, "BookValue"]
}
}
# if there is no datetime match in the positions matrix, this means that there was no position
# taken at the time and therefore cash is just equal to the previous time step (no change)
if (is.na(Pnl_df[i, "Cash"])){
Pnl_df[i, "Cash"] <- Pnl_df[i-1, "Cash"]
}
}
tradesbook
positionbook
filter_pnL <- subset(tradesbook, Symbol == "AAPL")
filter_pnl
filter_pnL
### TESTED
tradesbook <- global_tables$tradesbook
# manually add a row into the tradebook since the naive strategy doesn't empty inventory at end of session
new_row <- c(1444071660, "AAPL", 1, 1, 110.92, "Close", .15)
tradesbook <- rbind(tradesbook, new_row)
positionbook <- global_tables$positionbook
### TESTED
filter_pnL <- subset(tradesbook, Symbol == "AAPL")
filter_pnL
positionbook <- read.csv("positionbook.csv", header = TRUE)
filter_pnL <- subset(positionbook, Symbol == "AAPL")
filter_pnL
tradesbook <- read.csv("tradesbook.csv", header = TRUE)
filter_pnL <- subset(tradesbook, Symbol == "AAPL")
filter_pnL
positionbook <- global_tables$positionbook
positionbook
positionbook <- do.call(rbind, positionbook)
positionbook <- cbind(Timestamp = rownames(positionbook), positionbook)
rownames(positionbook) <- 1:nrow(positionbook)
positionbook$Timestamp <- sapply(strsplit(as.character(positionbook$Timestamp),".",fixed = TRUE), "[[", 1)
positionbook
tradesbook <- global_tables$tradesbook
# manually add a row into the tradebook since the naive strategy doesn't empty inventory at end of session
new_row <- c(1444071660, "AAPL", 1, 1, 110.92, "Close", .15)
tradesbook <- rbind(tradesbook, new_row)
tradesbook
source('constants.r')
setwd("/Users/jewelho/Desktop/Capstone/Code/APS490RBCCM")
# possible errors:
options( java.parameters = "-Xmx6g" )
install.packages("RWeka")
library( "RWeka" )
install.packages("XLConnect")
library(XLConnect)
#install.packages("xts")
#library( "xts" )
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
env <- global_tables
symbol <- "AC"
# the symbol is the same as the excel tab name
tick_name <-"AC_tick"
bid_name <-"AC_bid"
ask_name <-"AC_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/C_1to5.xlsm"
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
head(global_tables[["AC_bid"]])
head(global_tables[["AC_ask"]])
head(global_tables[["AC_tick"]])
tail(global_tables[["AC_tick"]])
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
data_cleaning <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove NA col
maxrow <- nrow(env[[Name]])
env[[Name]] = env[[Name]][complete.cases(env[[Name]][1:maxrow,] ) ,]
#maxrow <- nrow(env[[tick_name]])
#env[[tick_name]] = env[[tick_name]][complete.cases(env[[tick_name]][1:maxrow,] ) ,]
#maxrow <- nrow(env[[bid_name]])
#env[[bid_name]] = env[[bid_name]][complete.cases(env[[bid_name]][1:maxrow,] ) ,]
#maxrow <- nrow(env[[ask_name]])
#env[[ask_name]] = env[[ask_name]][complete.cases(env[[ask_name]][1:maxrow,] ) ,]
# maxrow <- nrow(env[[tick_name]])
# global_tables[["ABX_tick"]] = global_tables[["ABX_tick"]][complete.cases(global_tables[["ABX_tick"]][1:maxrow,] ) ,]
}
nrow(global_tables[["AC_tick"]])
nrow(global_tables[["AC_ask"]])
nrow(global_tables[["AC_bid"]])
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["AC_bid"]])
nrow(global_tables[["AC_ask"]])
nrow(global_tables[["AC_tick"]])
tail(global_tables[["AC_tick"]])
tail(global_tables[["AC_bid"]])
tail(global_tables[["AC_ask"]])
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
row_to_keep = c(nrow(env[[Name]]))
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
}else {
row_to_keep[i] <- FALSE
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["AC_tick"]])
nrow(global_tables[["AC_ask"]])
nrow(global_tables[["AC_bid"]])
global_tables[["AC_bid"]]
head(global_tables[["AC_bid"]])
global_tables[["AC_bid"]][100,1]
global_tables[["AC_bid"]][1,1]
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime,Closetime)
print(Opentime)
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
print("ioen",Open)
print("ioen",Opentime)
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
row_to_keep = c(nrow(env[[Name]]))
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
print("True",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}else {
row_to_keep[i] <- FALSE
print("Fale",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
row_to_keep = c(nrow(env[[Name]]))
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
print("True",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}else {
row_to_keep[i] <- FALSE
#print("False",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
EquityList <- c("AC_tick","AC_bid","AC_ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
global_tables[["AC_bid"]]
env <- global_tables
symbol <- "AC"
# the symbol is the same as the excel tab name
tick_name <-"AC_tick"
bid_name <-"AC_bid"
ask_name <-"AC_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/C_1to5.xlsm"
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
global_tables[["bid"]] <- global_tables[["AC_bid"]]
global_tables[["ask"]] <- global_tables[["AC_ask"]]
global_tables[["tick"]] <- global_tables[["AC_tick"]]
nrows(global_tables[["tick"]])
nrow(global_tables[["tick"]])
row_to_keep = c(nrow(global_tables[["tick"]])
)
row_to_keep
list[[3]]
logical(length = 1)
logical(length = 2)
a <-logical(length = 0)
a
a[1]
a[2]
a <-logical(length = 0)
a <-logical(length = 3)
a[1] <-TRUE
a
a[2] - FALSE
a[2] <- FALSE
a
a[2] <- TRUE
a
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
#row_to_keep = c(nrow(env[[Name]]))
row_to_keep <- logical(length = nrow(env[[Name]]) )
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
print("True",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}else {
row_to_keep[i] <- FALSE
#print("False",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
nrows(global_tables[["tick"]])
nrow(global_tables[["tick"]])
EquityList <- c("tick","bid","ask")
for (Name in EquityList) {
print(Name)
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
#data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["tick"]])
nrow(global_tables[["ask"]])
nrow(global_tables[["bid"]])
EquityList <- c("tick","bid","ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
data_cleaning2 <- function(filename, env, symbol, tick_name, bid_name, ask_name,Name){
# Remove close market data
Opentime <- as.POSIXct("2000-01-01 09:30:00", tz = "EST")
Opentime <-strftime(Opentime, format="%H:%M:%S")
Closetime <- as.POSIXct("2000-01-01 16:00:00", tz = "EST")
Closetime <-strftime(Closetime, format="%H:%M:%S")
print(Opentime)
#row_to_keep = c(nrow(env[[Name]]))
row_to_keep <- logical(length = nrow(env[[Name]]) )
for (i in 1:nrow(env[[Name]])){
temp <- strftime(env[[Name]][i,1], format="%H:%M:%S")
if ( temp >= Opentime && temp <= Closetime){
row_to_keep[i] <- TRUE
#print("True",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}else {
row_to_keep[i] <- FALSE
#print("False",strftime(env[[Name]][i,1], format="%H:%M:%S"))
}
}
env[[Name]] = env[[Name]][row_to_keep,]
}
EquityList <- c("tick","bid","ask")
for (Name in EquityList) {
print(Name)
#data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["bid"]])
nrow(global_tables[["ask"]])
nrow(global_tables[["tick"]])
head(global_tables[["tick"]])
global_tables[["tick"]]
global_tables[["ask"]]
global_tables[["bid"]]
nrow(global_tables[["AC_tick"]])
EquityList <- c("AC_tick","AC_bid","AC_ask")
#EquityList <- c("tick","bid","ask")
for (Name in EquityList) {
data_cleaning(filename, env, symbol, tick_name, bid_name, ask_name,Name)
data_cleaning2(filename, env, symbol, tick_name, bid_name, ask_name,Name)
}
nrow(global_tables[["AC_tick"]])
nrow(global_tables[["AC_ask"]])
nrow(global_tables[["AC_bid"]])
global_tables[["AC_bid"]]
env <- global_tables
symbol <- "BNS"
# the symbol is the same as the excel tab name
tick_name <-"BNS_tick"
bid_name <-"BNS_bid"
ask_name <-"BNS_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/C_26-46.xlsm"
symbol
data_extraction(filename, env, symbol, tick_name, bid_name, ask_name)
source('constants.r')
setwd("/Users/jewelho/Desktop/Capstone/Code/APS490RBCCM")
# possible errors:
options( java.parameters = "-Xmx6g" )
install.packages("RWeka")
library( "RWeka" )
install.packages("XLConnect")
library(XLConnect)
#install.packages("xts")
#library( "xts" )
env <- global_tables
symbol <- "BNS"
# the symbol is the same as the excel tab name
tick_name <-"BNS_tick"
bid_name <-"BNS_bid"
ask_name <-"BNS_ask"
filename <- "/Users/jewelho/dropbox/Capstone_Data_TSX/C_26-46.xlsm"
