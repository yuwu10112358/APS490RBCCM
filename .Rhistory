orderbook <- orderbook[,-1]
orderbook
orderbook <- orderbook[-1,]
orderbook
> orderbook <- matrix(data=NA,nrow=1,ncol=7)
> orderbook <- rbind(orderbook, orderline)
> orderbook
orderbook <- matrix(data=NA,nrow=1,ncol=7)
orderbook
orderbook <- rbind(orderbook, orderline)
orderbook
orderbook <- orderbook[-1,]
orderbook
orderbook <- rbind(orderbook, orderline)
orderbook
orderbook
orderbook[orderbook,1]
orderbook[1,]
orderbook[2,]
orderline2 <- cbind("new","AAPL",ourdata[i,2],1, -1,"market",NA)
orderbook <- rbind(orderbook, orderline2)
orderbook
orderbook[3,]
orderbook[2,]
orderbook[1,]
response <- cbind(1, 123, 124, "AAPL", 100, 1, 1, "market")
response
orderbook <- matrix(data=NA,nrow=1,ncol=7)
colnames(orderbook) <- c(msgtype, symbol, price, amount, b/s, market/limit/stop, refnumber)
orderbook <- matrix(data=NA,nrow=1,ncol=7)
colnames(orderbook) <- c("msgtype", "symbol", "price", "amount", "b/s", "market/limit/stop", "refnumber")
orderbook
orderbook <- rbind(orderbook, orderline2)
orderbook
orderbook <- rbind(orderbook, orderline)
orderbook
orderbook$msgtype
orderbook[,msgtype]
response
response[4]
currpositions = matrix(data = [response[1,4],0])
currpositions
currpositions = matrix([1,1])
currpositions = matrix(1,1)
currpositions
currpositions = matrix("AAPL",1,3)
currpositions
currpositions = matrix(NA,1,2)
currpositions[1,1] = response[1,4]
currpositions
currpositions = rbind(currpositions,(response[i,4],0))
currpositions = rbind(currpositions,[response[i,4],0])
currpositions = rbind(currpositions,matrix(response[i,4],0))
currpositions = rbind(currpositions,cbind(response[i,4],0))
currpositions
currpositions = cbind("AAPL",0)
currpositions
data_extraction <- function()
{
- #Requirements:
- #The excel sheet contains 3 tables arranged in order: Tick, Ask, Bid price.
- #Number of columns in each table can vary
-
library(XLConnect)
file <- readWorksheetFromFile("Intraday_Test_Data.xlsx",
sheet=1,
startRow = 3,
check.names = FALSE
)
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
tick = file[, mylist[1]:   (mylist[2] - 1)]
bid  = file[,(mylist[2]+1):(mylist[3] - 1)]
ask  = file[,(mylist[3]+1):length(file)]
}
file
data_extraction
data_extraction()
data_extraction <- function()
{
- #Requirements:
- #The excel sheet contains 3 tables arranged in order: Tick, Ask, Bid price.
- #Number of columns in each table can vary
-
library(XLConnect)
file <- readWorksheetFromFile("Intraday_Test_Data.xlsx",
sheet=1,
startRow = 3,
check.names = FALSE
)
}
data_extraction()
library(XLConnect)
file <- readWorksheetFromFile("Intraday_Test_Data.xlsx",
sheet=1,
startRow = 3,
check.names = FALSE
)
file <- readWorksheetFromFile("E:/YEAR 4/Code/Intraday_Test_Data.xlsx",
sheet=1,
startRow = 3,
check.names = FALSE
)
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/Intraday_Test_Data.xlsx",
sheet=1,
startRow = 3,
check.names = FALSE
)
options(java.parameters = "-Xmx1024m")
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/Intraday_Test_Data.xlsx",
sheet=1,
startRow = 3,
check.names = FALSE
)
options(java.parameters = "-Xmx4g" )
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/Intraday_Test_Data.xlsx",
sheet=1,
startRow = 3,
check.names = FALSE
)
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/Intraday_Test_Data1.xls",
sheet=1,
startRow = 3,
check.names = FALSE
)
file
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
tick = file[, mylist[1]:   (mylist[2] - 1)]
bid  = file[,(mylist[2]+1):(mylist[3] - 1)]
ask  = file[,(mylist[3]+1):length(file)]
tick
head(tick)
tick[2,1]-tick[1,1]
tick[2,1]-tick[1,1]+7
tick[2,1]-tick[1,1]+6.4754742
orderbook = dataframe(matrix(0, nrow=1, length(orderbook_spec)))
orderbook = data.frame(matrix(0, nrow=1, length(orderbook_spec)))
orderbook_spec <- c(Con_FieldName_OrdID,
Con_FieldName_Time,
Con_FieldName_Sym,
Con_FieldName_Price,
Con_FieldName_Qty,
Con_FieldName_Side,
Con_FieldName_OrdType)
Con_FieldName_MsgType = "Msgtype"
Con_FieldName_Sym = "Symbol"
Con_FieldName_Price = "Price"
Con_FieldName_Qty = "Quantity"
Con_FieldName_Side = "Side"
Con_FieldName_OrdType = "OrdType"
Con_FieldName_OrdID = "OrdID"
Con_FieldName_Time = "Timestamp"
Con_FieldName_ExecStatus = "ExecStatus"
Con_FieldName_AvgPrice = "AvgPrice"
Con_FieldName_BookVal = "BookValue"
Con_FieldName_MktVal = "MarketValue"
Con_FieldName_OpenClose = "Open/Close"
Con_FieldName_Pnl = "PnL"
orderbook_spec <- c(Con_FieldName_OrdID,
Con_FieldName_Time,
Con_FieldName_Sym,
Con_FieldName_Price,
Con_FieldName_Qty,
Con_FieldName_Side,
Con_FieldName_OrdType)
orderbook_spec
orderbook = data.frame(matrix(0, nrow=1, length(order_msg_spec)))
order_msg_spec <- c(Con_FieldName_MsgType,
Con_FieldName_Sym,
Con_FieldName_Price,
Con_FieldName_Qty,
Con_FieldName_Side,
Con_FieldName_OrdType,
Con_FieldName_OrdID,
Con_FieldName_Time)
order_msg_spec
library(XLConnect)
>>>>>>> parent of 6b94998... Updates to graphs
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/Intraday_Test_Data.xls",
sheet=1,
startRow = 3,
check.names = FALSE
)
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
tick = file[, mylist[1]:   (mylist[2] - 1)]
bid  = file[,(mylist[2]+1):(mylist[3] - 1)]
ask  = file[,(mylist[3]+1):length(file)]
library(XLConnect)
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/Intraday_Test_Data1.xls",
sheet=1,
startRow = 3,
check.names = FALSE
)
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
tick = file[, mylist[1]:   (mylist[2] - 1)]
bid  = file[,(mylist[2]+1):(mylist[3] - 1)]
ask  = file[,(mylist[3]+1):length(file)]
tick$OPEN[1,1]
tick$OPEN[1]
tick$OPEN[3]
tick$Date[1]
tick$Date[end]
tick$Date[length(tick$Date)]
library(XLConnect)
file <- readWorksheetFromFile("E:/YEAR 4/Code/APS490RBCCM/testdata.xls",
sheet=1,
startRow = 3,
check.names = FALSE
)
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
tick = file[, mylist[1]:   (mylist[2] - 1)]
bid  = file[,(mylist[2]+1):(mylist[3] - 1)]
ask  = file[,(mylist[3]+1):length(file)]
tick$HIGH
rm(list=ls())
# output <- function(tradesbook, positionbook, ask_prices, bid_prices, market_data){
### TESTED
tradesbook <- global_tables$tradesbook
# manually add a row into the tradebook since the naive strategy doesn't empty inventory at end of session
new_row <- c(1444071660, "AAPL", 1, 1, 110.92, "Close", .15)
tradesbook <- rbind(tradesbook, new_row)
positionbook <- global_tables$positionbook
### TESTED
### TESTED
# manipulate positionbook to make it a dataframe (it is received as a list)
positionbook <- do.call(rbind, positionbook)
positionbook <- cbind(Timestamp = rownames(positionbook), positionbook)
rownames(positionbook) <- 1:nrow(positionbook)
positionbook$Timestamp <- sapply(strsplit(as.character(positionbook$Timestamp),".",fixed = TRUE), "[[", 1)
ask_prices <- global_tables$ask_price
bid_prices <- global_tables$bid_price
### TESTED
### TESTED
# find the unique stocks that have been traded over the duration
stock_list <- unique(as.vector(tradesbook$Symbol))
# Set up the data frame which will store the cumulative pnl values for each stock and portfolio
Pnl_df <- data.frame(Symbol=character(), DateTime=as.Date(character()), BidAskPrice=character(),
BookValue=integer(), Side=integer(), Quantity = integer(),
Open.Close = character(), PnLStock = integer(), Cash = integer(),
Portfolio = integer(), PnLPortfolio = integer())
source('constants.r')
source('backtest_lib.r')
source('data_cleaning.r')
source('strategy_hmm.r')
source('strategy_ipr.R')
source('new metrics file.R')
setwd("E:/YEAR 4/Code/APS490RBCCM")
source('constants.r')
source('backtest_lib.r')
source('data_cleaning.r')
source('strategy_hmm.r')
source('strategy_ipr.R')
source('new metrics file.R')
<<<<<<< HEAD
<<<<<<< HEAD
=======
=======
>>>>>>> parent of 6b94998... Updates to graphs
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
datafile_name = "../data/TSXdatafile.xls"
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
import_data(global_tables)
<<<<<<< HEAD
>>>>>>> parent of 6b94998... Updates to graphs
=======
>>>>>>> parent of 6b94998... Updates to graphs
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
datafile_name = "../data/TSXdatafile.xls"
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
import_data(global_tables)
<<<<<<< HEAD
<<<<<<< HEAD
source('data_cleaning.r')
source('constants.r')
source('backtest_lib.r')
source('data_cleaning.r')
source('strategy_hmm.r')
source('strategy_ipr.R')
source('new metrics file.R')
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
datafile_name = "../data/TSXdatafile.xls"
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
import_data(global_tables)
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 3900, 20*390, 1050)
=======
=======
>>>>>>> parent of 6b94998... Updates to graphs
strategy_impliedpricerisk(c("DOL", "OTC", "ABX"), global_tables, 780, 780, 780)
output <- output(global_tables$tradesbook, global_tables$positionbook)
install.packages("tseries")
output <- output(global_tables$tradesbook, global_tables$positionbook)
output
source('data_cleaning.r')
import_data(global_tables)
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 780, 780, 780)
output <- output(global_tables$tradesbook, global_tables$positionbook)
source('new metrics file.R')
output <- output(global_tables$tradesbook, global_tables$positionbook)
output
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 1950, 1950, 1950)
output <- output(global_tables$tradesbook, global_tables$positionbook)
source('new metrics file.R')
output <- output(global_tables$tradesbook, global_tables$positionbook)
output
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 390, 390, 390)
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
datafile_name = "../data/TSXdatafile.xls"
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
import_data(global_tables)
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 390, 390, 390)
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 780, 780, 780)
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
(1 + period_portfolio_return)) ^ (length(Unique_Dates_Traded)/as.integer(no_trading_days_yearly)
(1 + period_portfolio_return)) ^ (length(Unique_Dates_Traded)/as.integer(no_trading_days_yearly))
(1 + period_portfolio_return) ^ (length(Unique_Dates_Traded)/as.integer(no_trading_days_yearly))
period_portfolio_return
output(global_tables$tradesbook, global_tables$positionbook)
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
output(global_tables$tradesbook, global_tables$positionbook)
period_portfolio_return
annualised_portfolio_return
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
period_portfolio_return
(1 + period_portfolio_return)
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
(1 + period_portfolio_return)
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
annualised_portfolio_return
period_portfolio_return
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
debugSource('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
output(global_tables$tradesbook, global_tables$positionbook)
source('E:/YEAR 4/Code/APS490RBCCM/new metrics file.R')
output(global_tables$tradesbook, global_tables$positionbook)
<<<<<<< HEAD
>>>>>>> parent of 6b94998... Updates to graphs
=======
>>>>>>> parent of 6b94998... Updates to graphs
import_data(global_tables)
debugSource('~/GitHub/APS490RBCCM/data_cleaning.R', echo=TRUE)
import_data(global_tables)
Stocks
import_data(global_tables)
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 780, 780, 780)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
output
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
seq(1, length(temp_matrix$DateTime), 30)
seq(1, length(temp_matrix$DateTime), 391)
temp_matrix$DateTime[seq(1, length(temp_matrix$DateTime), 391)]
temp_matrix$DateTime[seq(1, length(temp_matrix$DateTime), 390)]
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 3900, 7800, 3900)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
global_tables$positionbook
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
output
