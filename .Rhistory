price_estimates <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
ret <- return_and_stdev(price_estimates)$return
stdev <- return_and_stdev(price_estimates)$stdev
z <- (log(P_asterix/P_asterix_j_date) - jump * ret) / (sqrt(jump * stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
if (stock == Stocks[length(Stocks)]){
temp_dframe <- subset(IPR_df, Date == "2015-05-13 10:00:00")
# order the dataframe based on IPR values
temp_dframe <- temp_dframe[order(temp_dframe$IPR),]
# create buy or sell orders
for (b in length(temp_dframe)){
if (temp_dframe[b, "IPR"] >= 0.5){
# assign percentages to each stock for cash allocations
cash_alloc <- -(temp_dframe[b, "IPR"]) + 0.5
# send an order to the market with sell and using the existing cash * appropriate Pct
} else if (temp_dframe[b, "IPR"] < 0.5){
# assign percentages to each stock for cash allocations
cash_alloc <- -(temp_dframe[b, "IPR"]) + 0.5
# send an order to the market with buy and using the existing cash * appropriate Pct
}
}
}
}
a <- a + 30
}
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC", "BNS", "BMO")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30
# loop through each minute (a) but only calculate IPR every 30 minutes
while (a < 1000){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
price_estimates <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
ret <- return_and_stdev(price_estimates)$return
stdev <- return_and_stdev(price_estimates)$stdev
z <- (log(P_asterix/P_asterix_j_date) - jump * ret) / (sqrt(jump * stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
if (stock == Stocks[length(Stocks)]){
temp_dframe <- subset(IPR_df, Date == "2015-05-13 10:00:00")
# order the dataframe based on IPR values
temp_dframe <- temp_dframe[order(temp_dframe$IPR),]
# create buy or sell orders
for (b in length(temp_dframe)){
if (temp_dframe[b, "IPR"] >= 0.5){
# assign percentages to each stock for cash allocations
cash_alloc <- -(temp_dframe[b, "IPR"]) + 0.5
# send an order to the market with sell and using the existing cash * appropriate Pct
} else if (temp_dframe[b, "IPR"] < 0.5){
# assign percentages to each stock for cash allocations
cash_alloc <- -(temp_dframe[b, "IPR"]) + 0.5
# send an order to the market with buy and using the existing cash * appropriate Pct
}
}
}
}
a <- a + 30
}
View(BMO_tick)
prices_estimates <- data.frame(Price = BMO_tick[1:30, "LAST_PRICE"])
return_and_stdev(prices_estimates)
prices_estimates <- data.frame(Price = BNS_tick[1:30, "LAST_PRICE"])
return_and_stdev(prices_estimates)
prices_estimates <- data.frame(Price = AC_tick[1:30, "LAST_PRICE"])
return_and_stdev(prices_estimates)
BMO_tick[1:30, "LAST_PRICE"]
prices_estimates <- data.frame(Price = BMO_tick[1:30, "LAST_PRICE"])
return_and_stdev(prices_estimates)
next_date <- BMO_tick[30, "Date"]
P_asterix <- BMO_tick[30, "LAST_PRICE"]
P_asterix_j_date <-  BMO_tick[(30) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(BMO_tick$Date == next_date)
price_estimates <- data.frame(Price = BMO_tick[start_row:end_row, "LAST_PRICE"])
ret <- return_and_stdev(price_estimates)$return
stdev <- return_and_stdev(price_estimates)$stdev
z <- (log(P_asterix/P_asterix_j_date) - jump * ret) / (sqrt(jump * stdev))
next_date
View(BMO_tick)
pnorm(z)
z
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30*length(Stocks)
# loop through each minute (a) but only calculate IPR every 30 minutes
for(a in seq(from=1, to=end_a, by=30)){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
price_estimates <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
ret <- return_and_stdev(price_estimates)$return
stdev <- return_and_stdev(price_estimates)$stdev
z <- (log(P_asterix/P_asterix_j_date) - jump * ret) / (sqrt(jump * stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
}
a <- a + 30
}
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC", "BNS", "BMO")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30*length(Stocks)
# loop through each minute (a) but only calculate IPR every 30 minutes
while (a < 1000){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
price_estimates <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
ret <- return_and_stdev(price_estimates)$return
stdev <- return_and_stdev(price_estimates)$stdev
z <- (log(P_asterix/P_asterix_j_date) - jump * ret) / (sqrt(jump * stdev))
IPR <- pnorm(z)
IPR_df <- data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR)
}
a <- a + 30
}
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC", "BNS", "BMO")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30*length(Stocks)
# loop through each minute (a) but only calculate IPR every 30 minutes
while (a < 1000){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
price_estimates <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
# ret <- return_and_stdev(price_estimates)$return
# stdev <- return_and_stdev(price_estimates)$stdev
for (i in 2:NROW(prices)){
prices[i, "Return"] <- log10(prices[i,"Price"]/prices[i-1,"Price"])
}
final_return <- mean(na.omit(prices[, "Return"]))
for (i in 2:NROW(prices)){
prices[i, "StDev"] <- (prices[i, "Return"]-final_return)^2
}
final_stdev <- sum(na.omit(prices[, "StDev"]))/(NROW(prices)-1)
z <- (log(P_asterix/P_asterix_j_date) - jump * final_return) / (sqrt(jump * final_stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
}
a <- a + 30
}
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC", "BNS", "BMO")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30*length(Stocks)
# loop through each minute (a) but only calculate IPR every 30 minutes
while (a < 1000){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
prices <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
# ret <- return_and_stdev(price_estimates)$return
# stdev <- return_and_stdev(price_estimates)$stdev
for (i in 2:NROW(prices)){
prices[i, "Return"] <- log10(prices[i,"Price"]/prices[i-1,"Price"])
}
final_return <- mean(na.omit(prices[, "Return"]))
for (i in 2:NROW(prices)){
prices[i, "StDev"] <- (prices[i, "Return"]-final_return)^2
}
final_stdev <- sum(na.omit(prices[, "StDev"]))/(NROW(prices)-1)
z <- (log(P_asterix/P_asterix_j_date) - jump * final_return) / (sqrt(jump * final_stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
}
a <- a + 30
}
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC", "BNS", "BMO")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30*length(Stocks)
# loop through each minute (a) but only calculate IPR every 30 minutes
while (a < 1000){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
prices <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
# ret <- return_and_stdev(price_estimates)$return
# stdev <- return_and_stdev(price_estimates)$stdev
for (i in 2:NROW(prices)){
prices[i, "Return"] <- log10(prices[i,"Price"]/prices[i-1,"Price"])
}
final_return <- mean(na.omit(prices[, "Return"]))
for (i in 2:NROW(prices)){
prices[i, "StDev"] <- (prices[i, "Return"]-final_return)^2
}
final_stdev <- sum(na.omit(prices[, "StDev"]))/(NROW(prices)-1)
z <- (log(P_asterix/P_asterix_j_date) - jump * final_return) / (sqrt(jump * final_stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
}
IPR_df <- data.frame()
a <- a + 30
}
IPR_df
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC", "BNS", "BMO")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30*length(Stocks)
# loop through each minute (a) but only calculate IPR every 30 minutes
while (a < 1000){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
prices <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
# ret <- return_and_stdev(price_estimates)$return
# stdev <- return_and_stdev(price_estimates)$stdev
for (i in 2:NROW(prices)){
prices[i, "Return"] <- log10(prices[i,"Price"]/prices[i-1,"Price"])
}
final_return <- mean(na.omit(prices[, "Return"]))
for (i in 2:NROW(prices)){
prices[i, "StDev"] <- (prices[i, "Return"]-final_return)^2
}
final_stdev <- sum(na.omit(prices[, "StDev"]))/(NROW(prices)-1)
z <- (log(P_asterix/P_asterix_j_date) - jump * final_return) / (sqrt(jump * final_stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
}
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
a <- a + 30
}
View(IPR_df)
tmm <- Sys.time()
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC", "BNS", "BMO")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30*length(Stocks)
# loop through each minute (a) but only calculate IPR every 30 minutes
while (a < 1000){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
prices <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
# ret <- return_and_stdev(price_estimates)$return
# stdev <- return_and_stdev(price_estimates)$stdev
for (i in 2:NROW(prices)){
prices[i, "Return"] <- log10(prices[i,"Price"]/prices[i-1,"Price"])
}
final_return <- mean(na.omit(prices[, "Return"]))
for (i in 2:NROW(prices)){
prices[i, "StDev"] <- (prices[i, "Return"]-final_return)^2
}
final_stdev <- sum(na.omit(prices[, "StDev"]))/(NROW(prices)-1)
z <- (log(P_asterix/P_asterix_j_date) - jump * final_return) / (sqrt(jump * final_stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
}
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
a <- a + 30
}
tmm
start_time <- Sys.time()
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC", "BNS", "BMO")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30*length(Stocks)
# loop through each minute (a) but only calculate IPR every 30 minutes
while (a < 1000){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
prices <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
# ret <- return_and_stdev(price_estimates)$return
# stdev <- return_and_stdev(price_estimates)$stdev
for (i in 2:NROW(prices)){
prices[i, "Return"] <- log10(prices[i,"Price"]/prices[i-1,"Price"])
}
final_return <- mean(na.omit(prices[, "Return"]))
for (i in 2:NROW(prices)){
prices[i, "StDev"] <- (prices[i, "Return"]-final_return)^2
}
final_stdev <- sum(na.omit(prices[, "StDev"]))/(NROW(prices)-1)
z <- (log(P_asterix/P_asterix_j_date) - jump * final_return) / (sqrt(jump * final_stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
}
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
a <- a + 30
}
end_time <- Sys.time()
start_time
end_time
start_time <- Sys.time()
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
Stocks <- c("AC")
EquityList <- c("tick", "ask", "bid")
a <- 1
# only trading every 30 minutes, change this value when trading time is different
end_a <- nrow(list_dates)*12*30*length(Stocks)
# loop through each minute (a) but only calculate IPR every 30 minutes
while (a < end_a){
print(a)
for (stock in Stocks){
print(stock)
stock_data <- paste(stock,EquityList[1],sep="_")
tick_data <- env[[stock_data]]
if (strftime(tick_data[a, "Date"], format="%H:%M:%S") == "15:30:00"){
a <- a + 1
break
}
next_date <- tick_data[a+29, "Date"]
P_asterix <- tick_data[a+29, "LAST_PRICE"]
P_asterix_j_date <-  tick_data[(a+29) - jump, "LAST_PRICE"]
start_row <- 1
end_row <- which(tick_data$Date == next_date)
prices <- data.frame(Price = tick_data[start_row:end_row, "LAST_PRICE"])
# ret <- return_and_stdev(price_estimates)$return
# stdev <- return_and_stdev(price_estimates)$stdev
for (i in 2:NROW(prices)){
prices[i, "Return"] <- log10(prices[i,"Price"]/prices[i-1,"Price"])
}
final_return <- mean(na.omit(prices[, "Return"]))
for (i in 2:NROW(prices)){
prices[i, "StDev"] <- (prices[i, "Return"]-final_return)^2
}
final_stdev <- sum(na.omit(prices[, "StDev"]))/(NROW(prices)-1)
z <- (log(P_asterix/P_asterix_j_date) - jump * final_return) / (sqrt(jump * final_stdev))
IPR <- pnorm(z)
IPR_df <- rbind(IPR_df, data.frame(Date = next_date + 60, Symbol = stock, IPR = IPR))
}
IPR_df <- data.frame(Date = as.character(), Symbol = as.character(), IPR = as.integer())
a <- a + 30
}
end_time - start_time
start_time - end_time
View(AC_tick)
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
data_extraction <- function(filename, env, symbol, tick_name, bid_name, ask_name)
{
#Definition: This function creates tables (tick, bid and ask) of stock prices. It imports stock price data from an Excel file that links to the Bloomberg terminal.
#Requirements:
#The excel sheet contains 3 tables arranged in order: Tick, Ask, Bid price.
#Number of columns in each table can vary
file <- readWorksheetFromFile(filename,
sheet= symbol,
startRow = 3,
check.names = FALSE
)
#file <- read.xlsx(filename, sheet= symbol, startRow = 3,check.names = FALSE)
mylist = c()
mylist[1] = 1
for(i in 1:length(file)){
if(is.na(file[,i])) {
mylist[length(mylist)+1] = i
}}
env[[tick_name]] = file[, mylist[1]:   (mylist[2] - 1)]
env[[bid_name]]  = file[,(mylist[2]+1):(mylist[3] - 1)]
env[[ask_name]]  = file[,(mylist[3]+1):length(file)]
# only consider complete cases (remove NA)
#env[[bid_name]][complete.cases(env[[bid_name]]),]
#env[[ask_name]][complete.cases(env[[ask_name]]),]
}
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
library(XLConnect)
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
source('backtest_lib.r')
source('backtest_lib.r')
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('backtest_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
