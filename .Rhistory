boxplot(data = PlantGrowth, weight ~ group)
general_model <- glm(data = PlantGrowth, wt ~ group)
general_model <- glm(data = PlantGrowth, weight ~ group)
general_model
summary(general_model)
plot(group, weight)
plot(group, weight)
library(lattice)
barplot(general_model)
plot(group == "trt1", weight)
plot(weight~group)
new_df <- rbind(PlantGrowth$weight, PlantGrowth$group == "trt1")
new_df
new_df <- cbind(PlantGrowth$weight, PlantGrowth$group == "trt1")
new_df
new_df <- subset(PlantGrowth, group == "trt1")
new_df
trt2_df <- subset(PlantGrowth, group == "trt1", group == "trt2")
trt2_df
trt2_df <- subset(PlantGrowth, group <> "ctrl")
trt2_df <- subset(PlantGrowth, group != "ctrl")
trt2_df
general_model <- glm(data = trt2_df, weight ~ group)
general_model
summary(general_model)
general_model <- glm(data = trt2_df, trt2_df$weight ~ trt2_df$group)
general_model
summary(general_model)
levels(trt2_df$group)
trt2_df
levels(trt2_df$group)
gm <- glm(data = trt2_df, trt2_df$group ~ trt2df_weight)
gm <- glm(data = trt2_df, trt2_df$group ~ trt2$df_weight)
gm <- glm(data = trt2_df, trt2_df$group ~ trt2_df$weight)
group$trt2
ifelse(trt2_df$group == "trt1", 0, 1)
factorized <- ifelse(trt2_df$group == "trt1", 0, 1)
cbind(trt2_df, factorized)
gmodel <- glm(data = trt2_df, factorized ~ weight, family = "binomial")
gmodel
summary(gmodel)
addon <- data.frame(trt2_df$weight = 7.5)
addon <- data.frame(weight = 7.5)
addon
predict(gmodel, addon, type = "response")
start <- 1
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# getting the quotes for the testing period
data(GSPC)
library(xts)
library(tseries)
library(quantmod)
library(DMwR)
#############
### obtain historical data from the internet
#############
# initialize the source (Yahoo) and financial instrument (Apple)
setSymbolLookup(GSPC=list(name = "GSPC", src = "yahoo"))
getSymbols("GSPC")
data(GSPC)
date <- rownames(Tdata.train[start+len.tr,])
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes),v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else(x)
}
# describe the current pricing patterns by the use of 8 technical indicators.
# These technical indicators were narrowed down by a random forest strategy
# (not shown) and will be used to predict the T indicator at a future date
myATR <- function(x) ATR(HLC(x))[,'atr']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
myMACD <- function(x) MACD(Cl(x))[,2]
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) + myEMV(GSPC) + myVolat(GSPC)
+ myMACD(GSPC) + mySAR(GSPC) + runMean(Cl(GSPC)))
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes),v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else(x)
}
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) + myEMV(GSPC) + myVolat(GSPC)
+ myMACD(GSPC) + mySAR(GSPC) + runMean(Cl(GSPC)))
# use the feature set to predict 1) the correct value of T at the current day
myATR <- function(x) ATR(HLC(x))[,'atr']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
myMACD <- function(x) MACD(Cl(x))[,2]
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) + myEMV(GSPC) + myVolat(GSPC)
+ myMACD(GSPC) + mySAR(GSPC) + runMean(Cl(GSPC)))
# use the feature set to predict 1) the correct value of T at the current day
# (which will be translated to a buy, hold, or sell signal via a set
# threshold) or 2) the correct buy, hold, or sell signal directly
# determine the training (20 years) and test set (10 years). For each data
# frame, each indicator that we chose for our feature set is calculated for
# each day.
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
'1999-12-31')))
Tdata.eval <- na.omit(as.data.frame(modelData(data.model,
data.window=c('2000-01-01',
'2009-09-15'))))
Tform <- as.formula('T.ind.GSPC ~ .')
# we can use multiple models to predict a value for T
# first model is artifical neural networks. NN can be used for (1) regression
# and (2) classification techniques as described above
# regression with neural networks
start <- 1
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# getting the quotes for the testing period
data(GSPC)
date <- rownames(Tdata.train[start+len.tr,])
market <- GSPC[paste(date,'/',sep='')][1:len.ts]
head(market)
date
head(date)
Tdata.train[start+len.tr, ]
head(GSPC)
tail(GSPC)
setSymbolLookup(GSPC=list(name = "GSPC", src = "yahoo"))
getSymbols("GSPC")
tail(GSPC)
nrow(GSPC)
nrow(Tdata.train)
head(Tdata.train)
GSPC
NROW(GSPC)
head(tdata.train)
nrow(Tdata.train)
data(GSPC)
GSPC[1:len.ts]
market <- GSPC[paste(date,'/',sep='')][1:len.ts]
market
nrow(market)
head(market)
market <- GSPC[paste(date,'/',sep='')][1:len.ts]
head(market)
tail(market)
date <- rownames(Tdata.train[start+len.tr,])
date
start <- 1
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
tr
head(Tdata.train[tr,])
head(Tdata.train[1:1000,])
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
'1999-12-31')))
head(Tdata.train[1:1000,])
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
'1999-12-31')))
Tdata.train
head(Tdata.train)
library(xts)
library(tseries)
library(quantmod)
library(DMwR)
#############
### obtain historical data from the internet
#############
# initialize the source (Yahoo) and financial instrument (Apple)
setSymbolLookup(GSPC=list(name = "GSPC", src = "yahoo"))
getSymbols("GSPC")
#############
### use historical prices and trading model to generate trading signals
#############
# calculate the T indicator value for each day from the next 10 days
# average prices. T indicator summarizes the observed future behavior
# of the prices into a single value, does not predict any behavior.
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes),v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else(x)
}
# describe the current pricing patterns by the use of 8 technical indicators.
# These technical indicators were narrowed down by a random forest strategy
# (not shown) and will be used to predict the T indicator at a future date
myATR <- function(x) ATR(HLC(x))[,'atr']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
myMACD <- function(x) MACD(Cl(x))[,2]
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) + myEMV(GSPC) + myVolat(GSPC)
+ myMACD(GSPC) + mySAR(GSPC) + runMean(Cl(GSPC)))
# use the feature set to predict 1) the correct value of T at the current day
# (which will be translated to a buy, hold, or sell signal via a set
# threshold) or 2) the correct buy, hold, or sell signal directly
# determine the training (20 years) and test set (10 years). For each data
# frame, each indicator that we chose for our feature set is calculated for
# each day.
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
'1999-12-31')))
head(Tdata.train)
library(xts)
library(tseries)
library(quantmod)
library(DMwR)
setSymbolLookup(GSPC=list(name = "GSPC", src = "yahoo"))
getSymbols("GSPC")
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes),v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else(x)
}
myATR <- function(x) ATR(HLC(x))[,'atr']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
myMACD <- function(x) MACD(Cl(x))[,2]
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) + myEMV(GSPC) + myVolat(GSPC)
+ myMACD(GSPC) + mySAR(GSPC) + runMean(Cl(GSPC)))
library(xts)
library("DMwR")
library(tseries)
GSPC <- as.xts(get.hist.quote("^GSPC",
start="1970-01-02",end='2009-09-15',
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
library(quantmod)
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
## The following statment is wrong in the book (page 109)!
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes)[,1],v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else x
}
myATR <- function(x) ATR(HLC(x))[,'atr']
mySMI <- function(x) SMI(HLC(x))[,'SMI']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myAroon <- function(x) aroon(x[,c('High','Low')])$oscillator
myBB <- function(x) BBands(HLC(x))[,'pctB']
myChaikinVol <- function(x) Delt(chaikinVolatility(x[,c("High","Low")]))[,1]
myCLV <- function(x) EMA(CLV(HLC(x)))[,1]
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myMACD <- function(x) MACD(Cl(x))[,2]
myMFI <- function(x) MFI(x[,c("High","Low","Close")], x[,"Volume"])
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
data(GSPC)
library(randomForest)
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC)  + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC)  + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
set.seed(1234)
rf <- buildModel(data.model,method='randomForest',
training.per=c(start(GSPC),index(GSPC["1999-12-31"])),
ntree=50, importance=T)
varImpPlot(rf@fitted.model, type = 1)
imp <- importance(rf@fitted.model, type = 1)
rownames(imp)[which(imp > 10)]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) +    myEMV(GSPC) + myVolat(GSPC)  + myMACD(GSPC)
+ mySAR(GSPC) + runMean(Cl(GSPC)) )
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
'1999-12-31')))
head(Tdata.train)
head(GSPC)
head(T.ind(GSPC))
Tdata.train
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1999-12-31')))
head(Tdata.train)
library(xts)
library("DMwR")
### STEP1
library(tseries)
GSPC <- as.xts(get.hist.quote("^GSPC",
start="1970-01-02",end='2009-09-15',
quote=c("Open", "High", "Low", "Close","Volume","AdjClose")))
### STEP2
library(quantmod)
T.ind <- function(quotes,tgt.margin=0.025,n.days=10) {
v <- apply(HLC(quotes),1,mean)
r <- matrix(NA,ncol=n.days,nrow=NROW(quotes))
## The following statment is wrong in the book (page 109)!
for(x in 1:n.days) r[,x] <- Next(Delt(Cl(quotes)[,1],v,k=x),x)
x <- apply(r,1,function(x) sum(x[x > tgt.margin | x < -tgt.margin]))
if (is.xts(quotes)) xts(x,time(quotes)) else x
}
myATR <- function(x) ATR(HLC(x))[,'atr']
mySMI <- function(x) SMI(HLC(x))[,'SMI']
myADX <- function(x) ADX(HLC(x))[,'ADX']
myAroon <- function(x) aroon(x[,c('High','Low')])$oscillator
myBB <- function(x) BBands(HLC(x))[,'pctB']
myChaikinVol <- function(x) Delt(chaikinVolatility(x[,c("High","Low")]))[,1]
myCLV <- function(x) EMA(CLV(HLC(x)))[,1]
myEMV <- function(x) EMV(x[,c('High','Low')],x[,'Volume'])[,2]
myMACD <- function(x) MACD(Cl(x))[,2]
mySAR <- function(x) SAR(x[,c('High','Close')]) [,1]
myMFI <- function(x) MFI(x[,c("High","Low","Close")], x[,"Volume"])
myVolat <- function(x) volatility(OHLC(x),calc="garman")[,1]
data(GSPC)
library(randomForest)
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1:10) +
myATR(GSPC) + mySMI(GSPC) + myADX(GSPC) + myAroon(GSPC) +
myBB(GSPC)  + myChaikinVol(GSPC) + myCLV(GSPC) +
CMO(Cl(GSPC)) + EMA(Delt(Cl(GSPC))) + myEMV(GSPC) +
myVolat(GSPC)  + myMACD(GSPC) + myMFI(GSPC) + RSI(Cl(GSPC)) +
mySAR(GSPC) + runMean(Cl(GSPC)) + runSD(Cl(GSPC)))
set.seed(1234)
rf <- buildModel(data.model,method='randomForest',
training.per=c(start(GSPC),index(GSPC["1999-12-31"])),
ntree=50, importance=T)
varImpPlot(rf@fitted.model, type = 1)
imp <- importance(rf@fitted.model, type = 1)
rownames(imp)[which(imp > 10)]
data.model <- specifyModel(T.ind(GSPC) ~ Delt(Cl(GSPC),k=1) + myATR(GSPC)
+ myADX(GSPC) +    myEMV(GSPC) + myVolat(GSPC)  + myMACD(GSPC)
+ mySAR(GSPC) + runMean(Cl(GSPC)) )
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1999-12-31')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-02-18','1999-12-31')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1975-02-18','1999-12-31')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1999-12-31')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1970-02-18')))
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02','1970-02-17')))
head(Tdata.train)
head(Tdata.train)
Tdata.train <- as.data.frame(modelData(data.model,
data.window=c('1970-01-02',
'1999-12-31')))
Tdata.train
head(Tdata.train)
Tdata.eval <- na.omit(as.data.frame(modelData(data.model,
data.window=c('2000-01-01',
'2009-09-15'))))
head(tdata.eval)
head(Tdata.eval)
tail(Tdata.eval)
start <- 1
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# getting the quotes for the testing period
data(GSPC)
date <- rownames(Tdata.train[start+len.tr,])
market <- GSPC[paste(date,'/',sep='')][1:len.ts]
market
head(Tdata.train[tr,])
tail(Tdata.train[tr,])
head(Tdata.train[ts,])
tail(Tdata.train[ts,])
library(XLConnect)
source('constants.r')
setwd("~/GitHub/APS490RBCCM")
source('constants.r')
source('backtest_lib.r')
source('data_cleaning.r')
source('strategy_hmm.r')
source('strategy_ipr.R')
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
datafile_name = "../data/TSXdatafile.xls"
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_ListDates]] <- list(vector())
source('strategy_ipr.R')
source('new metrics file.R')
import_data(global_tables)
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 780, 780, 780)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
seq(0, max(Trades_distribution$TradeCount, 7))
seq(0, max(Trades_distribution$TradeCount, 3))
seq(0, max(Trades_distribution$TradeCount, by = 7))
seq(from = 0, to = max(Trades_distribution$TradeCount, by = 7))
seq(0, max(Trades_distribution$TradeCount), 7)
seq(0, max(Trades_distribution$TradeCount), 7)
seq(0, max(Trades_distribution$TradeCount), 3)
as.character(seq(0, max(Trades_distribution$TradeCount), 3))
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
import_data(global_tables)
strategy_impliedpricerisk(c("DOL", "OTC", "SU"), global_tables, 780, 780, 780)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
total
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
Trades_distribution$Day
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
Trades_distribution
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
PnL_distribution
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
seq(1, length(temp_matrix$DateTime), 30)
temp_matrix$DateTime[seq(1, length(temp_matrix$DateTime), 30)]
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
time_list$MarketRet
head(time_list)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
time_list$MarketRet*market_init_price
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
View(Pnl_df)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
View(Pnl_df)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
source('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
head(temp_matrix)
tail(temp_matrix)
temp_matrix$RawStockPnL
debugSource('~/GitHub/APS490RBCCM/new metrics file.R', echo=TRUE)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
output <- output(global_tables$tradesbook, global_tables$positionbook, global_tables$SPTSX_ask)
