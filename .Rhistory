#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction(global_tables, "Sheet1", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('backtest_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$ask_price
global_tables$bid_price
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
#knitr::spin
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("Intraday_Test_Data1.xls", global_tables, "Sheet1", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
global_tables$ask_price
colnames(global_tables$ask_price)
source('strategy_lib.r')
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
colnames(global_tables$market_price)
colnames(global_tables$bid_price)
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
#knitr::spin
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("singledaydata.xls", global_tables, "Sheet1", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
data_extraction("singledaydata.xls", global_tables, "Sheet1", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
# notes 2015-11-20
#1. ETL (cleaning, organizing section), factor in for missing data, outliers, etc.
# -> think of the opportunistic time intervals to trade (don't decide arbritarily, decide based on
# intelligence)
# -> separate the strategy from the market module in the flow chart
# -> market sends back fills and acknowledgements (assume we don't need this)
# -> strategy will act only upon "fill" (may not need to do this) and "timer"
# -> market reacts to order,replace,cancel and market data
# -> change active and passive to fill and timer
# -> highlight strategy with more detail
#knitr::spin
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
global_tables$ask_price
global_tables$bid_price
global_tables$market_price
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$positionbook
global_tables$tradesbook
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$ask_price
source('strategy_lib.r')
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$tradesbook
global_tables$positionbook
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
orderline
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$positionbook
global_tables$tradesbook
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
global_tables$positionbook
global_tables$tradesbook
View(handle_orders)
View(handle_orders)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
global_tables$tradesbook
global_tables$positionbook
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
#1. ETL (cleaning, organizing section), factor in for missing data, outliers, etc.
# -> think of the opportunistic time intervals to trade (don't decide arbritarily, decide based on
# intelligence)
# -> separate the strategy from the market module in the flow chart
# -> market sends back fills and acknowledgements (assume we don't need this)
# -> strategy will act only upon "fill" (may not need to do this) and "timer"
# -> market reacts to order,replace,cancel and market data
# -> change active and passive to fill and timer
# -> highlight strategy with more detail
#knitr::spin
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$tradesbook
global_tables$positionbook
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1]
as.integer((global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1]))
as.integer((global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][2]))
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$tradesbook
global_tables$positionbook
temp_pos <- global_tables$positionbook[[2]]
temp_pos
temp_pos[,Con_FieldName_Qty] == 0
temp_pos[,Con_FieldName_Qty]
temp_pos <- global_tables$positionbook[[3]]
temp_pos
temp_pos[,Con_FieldName_Qty]
temp_pos[,Con_FieldName_Qty] == 0
temp_pos[temp_pos[,Con_FieldName_Qty] == 0,]
temp_pos[!temp_pos[,Con_FieldName_Qty] == 0,]
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
global_tables$tradesbook
global_tables$positionbook
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
global_tables$tradesbook
global_tables$positionbook
>>>>>>> origin/master
