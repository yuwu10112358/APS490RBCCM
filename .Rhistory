<<<<<<< HEAD
curr_pnl <- ((Pnl_df[i, "Portfolio"] - Pnl_df[i-1, "Portfolio"])/Pnl_df[i-1, "Portfolio"])*100
Pnl_df[i, "PnLPortfolio"] <-  prev_pnl + curr_pnl
}
}
cumulative_pnl_portfolio <- Pnl_df[NROW(Pnl_df), "Portfolio"]
cumulative_pnl_portfolio
cumulative_pnl_portfolio <- Pnl_df[NROW(Pnl_df), "PnLPortfolio"]
cumulative_pnl_portfolio
cumulative_pnl_dataframe <- data.frame(Symbol = as.character(), CumPnL = as.integer())
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
cum_pnl <- temp_matrix[NROW(temp_matrix), "PnLStock"]
cumulative_pnl_dataframe <- rbind(cumulative_pnl_dataframe, data.frame(Symbol = stock_name,
CumPnL = cum_pnl))
}
cumulative_pnl_dataframe
Dates_Traded <- as.Date(strftime(tradesbook$Timestamp, "%Y-%m-%d"))
Unique_Dates_Traded <- seq(from = min(Dates), to = max(Dates), by = "day")
Trade.count <- sapply(Unique_Dates_Traded, FUN = function(X) sum(Dates_Traded == X))
Trades_distribution <- data.frame(Day = Unique_Dates_Traded, TradeCount = trade.count)
Dates_Traded <- as.Date(strftime(tradesbook$Timestamp, "%Y-%m-%d"))
Unique_Dates_Traded <- seq(from = min(Dates_Traded), to = max(Dates_Traded), by = "day")
Trade.count <- sapply(Unique_Dates_Traded, FUN = function(X) sum(Dates_Traded == X))
Trades_distribution <- data.frame(Day = Unique_Dates_Traded, TradeCount = trade.count)
Dates_Traded <- as.Date(strftime(tradesbook$Timestamp, "%Y-%m-%d"))
Unique_Dates_Traded <- seq(from = min(Dates_Traded), to = max(Dates_Traded), by = "day")
Trade.count <- sapply(Unique_Dates_Traded, FUN = function(X) sum(Dates_Traded == X))
Trades_distribution <- data.frame(Day = Unique_Dates_Traded, TradeCount = Trade.count)
Trades_distribution
PnL_distribution <- data.frame(Date = as.Date(as.character()), PortfolioOpen = as.integer(),
PortfolioClose = as.integer(), PnL = as.integer())
for (i in 1:length(Unique_Dates_Traded)){
temp_matrix <- subset(Pnl_df, as.Date(Pnl_df$DateTime) == Unique_Dates_Traded[i])
Portfolio_Open <- temp_matrix[1, "Portfolio"]
Portfolio_Close <- temp_matrix[NROW(Pnl_df), "Portfolio"]
PnL <- 100*((Portfolio_Close - Portfolio_Open) / (Portfolio_Open))
PnL_distribution <- rbind(PnL_distribution, data.frame(Date = Unique_Dates_Traded[i],
PortfolioOpen = Portfolio_Open,
PortfolioClose = Portfolio_Close,
PnL = PnL))
}
PnL_distribution
NROW(Pnl_df)
temp_matrix
Portfolio_Close
temp_matrx[NROW(Pnl_df), "Portfolio"]
temp_matrix[NROW(Pnl_df), "Portfolio"]
temp_matrx[1, "Portfolio"]
temp_matrix[1, "Portfolio"]
NROW(Pnl_df)
# calculate the average daily PnL
PnL_distribution <- data.frame(Date = as.Date(as.character()), PortfolioOpen = as.integer(),
PortfolioClose = as.integer(), PnL = as.integer())
for (i in 1:length(Unique_Dates_Traded)){
temp_matrix <- subset(Pnl_df, as.Date(Pnl_df$DateTime) == Unique_Dates_Traded[i])
Portfolio_Open <- temp_matrix[1, "Portfolio"]
Portfolio_Close <- temp_matrix[NROW(Pnl_df)-1, "Portfolio"]
PnL <- 100*((Portfolio_Close - Portfolio_Open) / (Portfolio_Open))
PnL_distribution <- rbind(PnL_distribution, data.frame(Date = Unique_Dates_Traded[i],
PortfolioOpen = Portfolio_Open,
PortfolioClose = Portfolio_Close,
PnL = PnL))
}
PnL_distribution
temp_matrix[3839, "Portfolio"]
temp_matrix[3800, "Portfolio"]
temp_matrix[200, "Portfolio"]
View(temp_matrix)
NROW(na.omit(temp_matrix))
Portfolio_Close <- temp_matrix[NROW(Pnl_df), "Portfolio"]
for (i in 1:length(Unique_Dates_Traded)){
temp_matrix <- subset(Pnl_df, as.Date(Pnl_df$DateTime) == Unique_Dates_Traded[i])
Portfolio_Open <- temp_matrix[1, "Portfolio"]
Portfolio_Close <- temp_matrix[NROW(na.omit(Pnl_df)), "Portfolio"]
PnL <- 100*((Portfolio_Close - Portfolio_Open) / (Portfolio_Open))
PnL_distribution <- rbind(PnL_distribution, data.frame(Date = Unique_Dates_Traded[i],
PortfolioOpen = Portfolio_Open,
PortfolioClose = Portfolio_Close,
PnL = PnL))
}
PnL_distribution
PnL_distribution <- data.frame(Date = as.Date(as.character()), PortfolioOpen = as.integer(),
PortfolioClose = as.integer(), PnL = as.integer())
for (i in 1:length(Unique_Dates_Traded)){
temp_matrix <- subset(Pnl_df, as.Date(Pnl_df$DateTime) == Unique_Dates_Traded[i])
Portfolio_Open <- temp_matrix[1, "Portfolio"]
Portfolio_Close <- temp_matrix[NROW(na.omit(Pnl_df)), "Portfolio"]
PnL <- 100*((Portfolio_Close - Portfolio_Open) / (Portfolio_Open))
PnL_distribution <- rbind(PnL_distribution, data.frame(Date = Unique_Dates_Traded[i],
PortfolioOpen = Portfolio_Open,
PortfolioClose = Portfolio_Close,
PnL = PnL))
}
PnL_distribution
NROW(na.omit(Pnl_df))
PnL_distribution <- data.frame(Date = as.Date(as.character()), PortfolioOpen = as.integer(),
PortfolioClose = as.integer(), PnL = as.integer())
for (i in 1:length(Unique_Dates_Traded)){
temp_matrix <- subset(Pnl_df, as.Date(Pnl_df$DateTime) == Unique_Dates_Traded[i])
Portfolio_Open <- temp_matrix[1, "Portfolio"]
Portfolio_Close <- temp_matrix[NROW(na.omit(temp_matrix)), "Portfolio"]
PnL <- 100*((Portfolio_Close - Portfolio_Open) / (Portfolio_Open))
PnL_distribution <- rbind(PnL_distribution, data.frame(Date = Unique_Dates_Traded[i],
PortfolioOpen = Portfolio_Open,
PortfolioClose = Portfolio_Close,
PnL = PnL))
}
PnL_distribution
average_daily_PnL <- mean(PnL_distribution$PnL)
average_daily_PnL
percent_profitable_days <- sum(PnL_distribution$PnL > 0)/NROW(percent_profitable_days)
percent_profitable_days <- sum(PnL_distribution$PnL > 0)/NROW(PnL_distribution)
percent_profitable_days
percent_profitable_days <- (sum(PnL_distribution$PnL > 0)/NROW(PnL_distribution))*100
percent_profitable_days
total_trades <- NROW(tradesbook_spec)
total_trades
total_trades <- NROW(tradesbook)
total_trades
View(tradesbook)
average_daily_trades <- mean(trades_distribution$TradeCount)
average_daily_trades <- mean(Trades_distribution$TradeCount)
average_daily_trades
filter_pnL <- subset(tradesbook, PnL > 0)
filter_pnL <- subset(tradesbook, PnL != "")
filter_pnL
tradesbook <- read.csv("tradesbook.csv", header = TRUE)
filter_pnL <- subset(tradesbook, PnL != "")
filter_pnL
filter_pnL <- subset(tradesbook, PnL > 0)
filter_pnL
View(position_trades)
average_PnL_all_trades <- mean(tradesbook$PnL)
average_PnL_all_trades
View(tradesbook)
average_PnL_all_trades <- mean(filter_pnl$PnL)
average_PnL_all_trades
average_PnL_all_trades <- mean(filter_pnL$PnL)
average_PnL_all_trades
filter_pnL <- subset(tradesbook, PnL != "")
filter_pnL
average_PnL_all_trades <- mean(filter_pnL$PnL)
average_PnL_all_trades
average_pnl_dataframe <- data.frame(Symbol = as.character(), AveragePnL = as.integer())
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(tradesbook_spec, Symbol == stock_name)
avg_pnl <- mean(temp_matrix$PnL)
average_pnl_dataframe <- rbind(average_pnl_dataframe, data.frame(Symbol = stock_name,
AveragePnL = avg_pnl))
}
average_pnl_dataframe <- data.frame(Symbol = as.character(), AveragePnL = as.integer())
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(tradesbook, Symbol == stock_name)
avg_pnl <- mean(temp_matrix$PnL)
average_pnl_dataframe <- rbind(average_pnl_dataframe, data.frame(Symbol = stock_name,
AveragePnL = avg_pnl))
}
average_pnl_dataframe
stock_list
average_pnl_dataframe <- data.frame(Symbol = as.character(), AveragePnL = as.integer())
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(tradesbook, Symbol == stock_name)
avg_pnl <- mean(subset(temp_matrix, PnL != "")$PnL)
average_pnl_dataframe <- rbind(average_pnl_dataframe, data.frame(Symbol = stock_name,
AveragePnL = avg_pnl))
}
average_pnl_dataframe
View(filtered_position)
View(filter_pnL)
number_of_trades <- sum(filter_pnL$PnL>0)/NROW(filter_pnL)
number_of_trades
number_of_trades_profitable <- sum(filter_pnL$PnL>0)/NROW(filter_pnL)
number_of_trades_profitable <- (sum(filter_pnL$PnL>0)/NROW(filter_pnL))*100
number_of_trades_profitable
maximum_drawdown <- 0
for (i in 1:NROW(Pnl_df)){
if (i == 1){
drawdown <- 0
} else {
max_date <- Pnl_df$Timedate[Pl_df$Portfolio==max(Pnl_df[1:i-1])]
drawdown <- ((Pnl_df[i, "Portfolio"]/max(Pnl_df[1:i-1])) - 1)*100
if (drawdown < maximum_drawdown){
maximum_drawdown <- drawdown
maximum_drawdown_period <- max_date - Pnl_df[i, "DateTime"]
}
}
}
maximum_drawdown <- 0
for (i in 1:NROW(Pnl_df)){
if (i == 1){
drawdown <- 0
} else {
max_date <- Pnl_df$Timedate[Pnl_df$Portfolio==max(Pnl_df[1:i-1])]
drawdown <- ((Pnl_df[i, "Portfolio"]/max(Pnl_df[1:i-1])) - 1)*100
if (drawdown < maximum_drawdown){
maximum_drawdown <- drawdown
maximum_drawdown_period <- max_date - Pnl_df[i, "DateTime"]
}
}
}
View(Pnl_df)
max(Pnl_df[1:10-1])
max(Pnl_df$Portfolio[1:10-1])
Pnl_df$Timedate[max(Pnl_df$Portfolio[1:10-1])]
which(Pnl_df$Portfolio == max(Pnl_df$Portfolio[1:10-1]))
which(Pnl_df$Portfolio == max(Pnl_df$Portfolio[1:10-1]))[1]
Pnl_df[which(Pnl_df$Portfolio == max(Pnl_df$Portfolio[1:10-1]))[1], "TimeDate"]
Pnl_df[which(Pnl_df$Portfolio == max(Pnl_df$Portfolio[1:10-1]))[2], "TimeDate"]
which(Pnl_df$Portfolio == max(Pnl_df$Portfolio[1:10-1]))[1]
which(Pnl_df$Portfolio == max(Pnl_df$Portfolio[1:10-1]))[1] + 1
Pnl_df[1, "TimeDate"]
Pnl_df[1, "DateTime"]
Pnl_df[which(Pnl_df$Portfolio == max(Pnl_df$Portfolio[1:10-1]))[1], "DateTime"]
Pnl_df[which(Pnl_df$Portfolio == max(Pnl_df$Portfolio[1:10-1])), "DateTime"]
max(Pnl_df$Portfolio[1:10-1])
Pnl_df$DateTime[max(Pnl_df$Portfolio[1:10-1])]
max(Pnl_df$Portfolio[1:10-1])
which(Pnl_df[,max(Pnl_df$Portfolio[1:10-1])])
which.max(Pnl_df$Portfolio[1:9])
Pnl_df[which.max(Pnl_df$Portfolio[1:9]), "DateTime"]
maximum_drawdown <- 0
for (i in 1:NROW(Pnl_df)){
if (i == 1){
drawdown <- 0
} else {
max_date <- Pnl_df[which.max(Pnl_df$Portfolio[1:i-1]), "DateTime"]
drawdown <- ((Pnl_df[i, "Portfolio"]/max(Pnl_df$Portfolio[1:i-1])) - 1)*100
if (drawdown < maximum_drawdown){
maximum_drawdown <- drawdown
maximum_drawdown_period <- max_date - Pnl_df[i, "DateTime"]
}
}
}
maximum_drawdown
maximum_drawdown_period
max_date
end_cash <- Pnl_df[NROW(Pnl_df), "Cash"]
init_cash <- init_cash
end_cash <- Pnl_df[NROW(Pnl_df), "Cash"]
return <- ((end_cash - init_cash)/(init_cash))*100
return
init_day <- Pnl_df[1, "DateTime"]
end_day <- Pnl_df[NROW(Pnl_df), "DateTime"]
holding_period <- end_day - init_day
holding_period
return1 <- ((end_cash - init_cash)/(init_cash))*100
annualised_return <- (365 * (return1))/holding_period
annualised_return <- (365 * (return1))
annualised_return
annualised_return/holding_period
annualised_return/as.integer(holding_period)
(as.yearmon(strptime(init_day, format = "%Y-%m-%d"))-
as.yearmon(strptime(end_day, format = "%Y-%m-%d")))*12
(strptime(init_day, format = "%Y-%m-%d"))- (strptime(end_day, format = "%Y-%m-%d"))
init_day
end_day <- Pnl_df[2, "DateTime"]
holding_period <- end_day - init_day
holding_period
days_in_year <- 365
init_cash <- init_cash
end_cash <- Pnl_df[NROW(Pnl_df), "Cash"]
return1 <- ((end_cash - init_cash)/(init_cash))*100
init_day <- Pnl_df[1, "DateTime"]
end_day <- Pnl_df[NROW(Pnl_df), "DateTime"]
holding_period <- end_day - init_day
annualised_return <- (days_in_year * (return1))/as.integer(holding_period)
annualised_return
stdev <- stdev(Pnl_df$Portfolio)
stdev <- sd(Pnl_df$Portfolio)
stdev
annualised_stdev <- (days_in_year * (stdev))/as.integer(holding_period)
annualised_stdev
percent_trades_profitable <- (sum(filter_pnL$PnL>0)/NROW(filter_pnL))*100
summary_statistics <- data.frame(NumberofTradesTotal = total_trades, AvgTradesPerDay = average_daily_trades,
CumPnLPortfolio = cumulative_pnl_portfolio, AvgDailyPnL = average_daily_PnL,
PctDaysProfitable = percent_profitable_days, AvgPnLAllTrades = average_PnL_all_trades,
PctTradesProfitable = percent_trades_profitable, MaxDrawdown = maximum_drawdown,
MaxDrawdownPeriod = maximum_drawdown_period, AnnualizedReturn = annualised_return,
AnnualizedStdev = annualised_stdev)
summary_statistics
summary_statistics <- data.frame(NumberofTradesTotal = total_trades, AvgTradesPerDay = average_daily_trades,
CumPnLPortfolio = cumulative_pnl_portfolio, AvgDailyPnL = average_daily_PnL,
PctDaysProfitable = percent_profitable_days, AvgPnLAllTrades = average_PnL_all_trades,
PctTradesProfitable = percent_trades_profitable, MaxDrawdown = maximum_drawdown,
MaxDrawdownPeriod = maximum_drawdown_period, AnnualizedReturn = annualised_return,
AnnualizedStdev = annualised_stdev, Test = average_pnl_dataframe)
cumulative_pnl_dataframe
average_pnl_dataframe
average_pnl_dataframe <- data.frame(Symbol = as.character(), AveragePnLPerTrade = as.integer())
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(tradesbook, Symbol == stock_name)
avg_pnl <- mean(subset(temp_matrix, PnL != "")$PnL)
average_pnl_dataframe <- rbind(average_pnl_dataframe, data.frame(Symbol = stock_name,
AveragePnLPerTrade = avg_pnl))
}
cumulative_pnl_dataframe
average_pnl_dataframe
merge(cumulative_pnl_dataframe, average_pnl_dataframe)
summary_statistics_byStock <- merge(cumulative_pnl_dataframe, average_pnl_dataframe)
plot(Pnl_df$PnLPortfolio)
plot(Pnl_df$PnLPortfolio)
plot(Pnl_df$PnLPortfolio, type = "1")
plot(Pnl_df$PnLPortfolio, type = "l")
plot(Pnl_df$PnLPortfolio, type = "h")
plot(Pnl_df$PnLPortfolio, type = "l")
plot(Pnl_df$PnLPortfolio, Pnl_df$DateTime, type = "l")
plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, type = "l")
plot(strftime(Pnl_df$DateTime, "%Y-%m-%d"), Pnl_df$PnLPortfolio, type = "l")
strftime(Pnl_df$DateTime, "%Y-%m-%d")
plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, type = "l")
plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, main="Cumulative PnL of Portfolio",
xlab="Dates", ylab="Portfolio Value ($) - Non-Realized",
xlim=c(min(Pnl_df$DateTime), max(Pnl_df$DateTime)), ylim=c(ymin, ymax))
plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, main="Cumulative PnL of Portfolio",
xlab="Dates", ylab="Portfolio Value ($) - Non-Realized",
xlim=c(min(Pnl_df$DateTime), max(Pnl_df$DateTime)))
plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, main="Cumulative PnL of Portfolio",
xlab="Dates", ylab="Portfolio Value ($) - Non-Realized")
plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, type = "l")
plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, main="Cumulative PnL of Portfolio",
xlab="Dates", ylab="Portfolio Value ($) - Non-Realized", type = "l")
cum_pnl_portfolio_plot <- plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, main="Cumulative PnL of Portfolio",
xlab="Dates", ylab="Cumulative PnL (%) - Non-Realized", type = "l")
cum_pnl_portfolio_plot <- plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, main="Cumulative PnL of Portfolio",
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
pdf("plots.pdf")
cum_pnl_portfolio_plot <- plot(Pnl_df$DateTime, Pnl_df$PnLPortfolio, main="Cumulative PnL of Portfolio",
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
dev.off()
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(Pnl_df, Symbol = stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
pdf(file_name)
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
}
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(Pnl_df, Symbol = stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
#pdf(file_name)
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
}
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(Pnl_df, Symbol = stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
#pdf(file_name)
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
}
stock_list <- unique(as.vector(tradesbook$Symbol))
tradesbook <- read.csv("tradesbook.csv", header = TRUE)
stock_list <- unique(as.vector(tradesbook$Symbol))
temp_matrix
head(temp_matrix)
stock_name <- stock_list[1]
stock_name
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
#pdf(file_name)
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
}
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
temp_matrix
head(temp_matrix)
stock_name
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main="test",
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
stock_name <- stock_list[1]
stock_name
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
head(temp_matrix)
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main="test",
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
head(temp_matrix)
temp_matrix$PnLStock
plot(temp_matrix$DateTime, a, main="test", xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
a <- temp_matrix$PnLStock
plot(temp_matrix$DateTime, a, main="test", xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
plot(a)
plot(a)
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
#pdf(file_name)
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
}
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
pdf(file_name)
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
}
for (i in 1:length(stock_list)){
stock_name <- stock_list[i]
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
pdf(file_name)
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
dev.off()
}
for (i in 1:length(stock_list)){
stock_name <- stock_list[1]
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
#pdf(file_name)
plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
#dev.off()
}
for (i in 1:length(stock_list)){
stock_name <- stock_list[1]
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
#pdf(file_name)
temp_plot <- plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
#dev.off()
}
for (i in 1:length(stock_list)){
stock_name <- stock_list[1]
temp_matrix <- subset(Pnl_df, Symbol == stock_name)
file_name <- paste(stock_name, "cumulativePnL.pdf", sep = "")
pdf(file_name)
temp_plot <- plot(temp_matrix$DateTime, temp_matrix$PnLStock, main=paste(stock_name, "cumulativePnL"),
xlab="Dates", ylab="Cumulative PnL (%)", type = "l")
dev.off()
}
pdf("TradesPerDay.pdf")
trades_per_day_plot <- plot(Trades_distribution$Day, Trades_distribution$TradeCount,
main="Trades Per Day", xlab="Days",
ylab="Number of Trades", type = "l")
dev.off()
pdf("PnLPerDay.pdf")
PnL_per_day_plot <- plot(PnL_distribution$Date, PnL_distribution$PnL,
main="PnL Per Day", xlab="Days",
ylab="Pnl (%)", type = "l")
dev.off()
filter_pnL <- subset(tradesbook, PnL != "")
filter_pnL
filter_pnL <- subset(tradesbook, PnL != "")
pdf("PnLPerDay.pdf")
PnL_per_day_plot <- plot(filter_pnL$Timestamp, filter_pnL$PnL,
main="PnL Per Trade", xlab="Days",
ylab="Pnl (%)", type = "l")
dev.off()
pdf("PnLPerDay.pdf")
PnL_per_day_plot <- plot(PnL_distribution$Date, PnL_distribution$PnL,
main="PnL Per Day", xlab="Days",
ylab="Pnl (%)", type = "l")
dev.off()
filter_pnL <- subset(tradesbook, PnL != "")
pdf("PnLPerTrade.pdf")
PnL_per_day_plot <- plot(filter_pnL$Timestamp, filter_pnL$PnL,
main="PnL Per Trade", xlab="Days",
ylab="Pnl (%)", type = "l")
dev.off()
start_date <- Pnl_df[1, "DateTime"]
end_date <- Pnl_df[NROW(Pnl_df), "DateTime"]
start_date
end_date
summary_statistics_byStock <- merge(cumulative_pnl_dataframe, average_pnl_dataframe)
summary_statistics_byStock
summary_statistics_all <- data.frame(NumberofTradesTotal = total_trades, AvgTradesPerDay = average_daily_trades,
CumPnLPortfolio = cumulative_pnl_portfolio, AvgDailyPnL = average_daily_PnL,
PctDaysProfitable = percent_profitable_days, AvgPnLAllTrades = average_PnL_all_trades,
PctTradesProfitable = percent_trades_profitable, MaxDrawdown = maximum_drawdown,
MaxDrawdownPeriod = maximum_drawdown_period, AnnualizedReturn = annualised_return,
AnnualizedStdev = annualised_stdev, SharpeRato = sharpe_ratio)
tatistics_all <- data.frame(NumberofTradesTotal = total_trades, AvgTradesPerDay = average_daily_trades,
summary_statistics_all <- data.frame(NumberofTradesTotal = total_trades, AvgTradesPerDay = average_daily_trades,
CumPnLPortfolio = cumulative_pnl_portfolio, AvgDailyPnL = average_daily_PnL,
PctDaysProfitable = percent_profitable_days, AvgPnLAllTrades = average_PnL_all_trades,
PctTradesProfitable = percent_trades_profitable, MaxDrawdown = maximum_drawdown,
MaxDrawdownPeriod = maximum_drawdown_period, AnnualizedReturn = annualised_return,
AnnualizedStdev = annualised_stdev) #SharpeRato = sharpe_ratio)
)
summary_statistics_all
maximum_drawdown <- 0
for (i in 1:NROW(Pnl_df)){
if (i == 1){
drawdown <- 0
} else {
max_date <- Pnl_df[which.max(Pnl_df$Portfolio[1:i-1]), "DateTime"]
drawdown <- ((Pnl_df[i, "Portfolio"]/max(Pnl_df$Portfolio[1:i-1])) - 1)*100
if (drawdown < maximum_drawdown){
maximum_drawdown <- drawdown
maximum_drawdown_period <- Pnl_df[i, "DateTime"] - max_date
}
}
}
maximum_drawdown_period
source('C:/Users/Mary/OneDrive/metric2.R', echo=TRUE)
=======
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction(global_tables, "Sheet1", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('backtest_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$ask_price
global_tables$bid_price
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
#knitr::spin
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("Intraday_Test_Data1.xls", global_tables, "Sheet1", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
global_tables$ask_price
colnames(global_tables$ask_price)
source('strategy_lib.r')
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
colnames(global_tables$market_price)
colnames(global_tables$bid_price)
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
#knitr::spin
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("singledaydata.xls", global_tables, "Sheet1", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
data_extraction("singledaydata.xls", global_tables, "Sheet1", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
# notes 2015-11-20
#1. ETL (cleaning, organizing section), factor in for missing data, outliers, etc.
# -> think of the opportunistic time intervals to trade (don't decide arbritarily, decide based on
# intelligence)
# -> separate the strategy from the market module in the flow chart
# -> market sends back fills and acknowledgements (assume we don't need this)
# -> strategy will act only upon "fill" (may not need to do this) and "timer"
# -> market reacts to order,replace,cancel and market data
# -> change active and passive to fill and timer
# -> highlight strategy with more detail
#knitr::spin
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
global_tables$ask_price
global_tables$bid_price
global_tables$market_price
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$positionbook
global_tables$tradesbook
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$ask_price
source('strategy_lib.r')
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$tradesbook
global_tables$positionbook
source('strategy_lib.r')
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
orderline
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$positionbook
global_tables$tradesbook
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
global_tables$positionbook
global_tables$tradesbook
View(handle_orders)
View(handle_orders)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
global_tables$tradesbook
global_tables$positionbook
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
#1. ETL (cleaning, organizing section), factor in for missing data, outliers, etc.
# -> think of the opportunistic time intervals to trade (don't decide arbritarily, decide based on
# intelligence)
# -> separate the strategy from the market module in the flow chart
# -> market sends back fills and acknowledgements (assume we don't need this)
# -> strategy will act only upon "fill" (may not need to do this) and "timer"
# -> market reacts to order,replace,cancel and market data
# -> change active and passive to fill and timer
# -> highlight strategy with more detail
#knitr::spin
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$tradesbook
global_tables$positionbook
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1]
as.integer((global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1]))
as.integer((global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][2]))
source('constants.r')
source('strategy_lib.r')
source('backtest_lib.r')
library(XLConnect)
library(knitr)
init_cash = 100000
#global_variables: position matrices, trade matrices, ourdata, order book
#order format: msgtype, symbol, price, quantity, side, ordtype, orderID, time
#execution message format: orderID, Execstatus, symbol, quantity, avg price, side, time
#Execstatus can be the following: filled, replaced, cancelled, replacereject?, cancelreject
#order book format: orderID, time, symbol, price, quantity, side, ordtype
#trade matrix format: time, symbol, side, quantity, price, open/close, pnl
#position matrix: time, asset, #of shares, book value, market value,
global_tables = new.env()
global_tables[[Con_GlobalVarName_LOB]]<- data.frame(matrix(0, 0, length(orderbook_spec)))
colnames(global_tables[[Con_GlobalVarName_LOB]]) <- orderbook_spec
#the position book is a list of data frames
init_pos <- data.frame(matrix(0, 1, length(positionbook_spec)))
colnames(init_pos) <- positionbook_spec
init_pos[,Con_FieldName_Sym] = Con_Sym_Cash
init_pos[,c(Con_FieldName_Qty, Con_FieldName_BookVal, Con_FieldName_MktVal)] = init_cash
global_tables[[Con_GlobalVarName_PositionBook]] <- list(init_pos)
names(global_tables[[Con_GlobalVarName_PositionBook]])[1] = 0
global_tables[[Con_GlobalVarName_TradesBook]] <- data.frame(matrix(0, 0, length(tradesbook_spec)))
colnames(global_tables[[Con_GlobalVarName_TradesBook]]) <- tradesbook_spec
global_tables[[Con_GlobalVarName_MktPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_BidPrice]] <- list(vector())
global_tables[[Con_GlobalVarName_AskPrice]] <- list(vector())
data_extraction("AAPL.xls", global_tables, "AAPL", Con_GlobalVarName_MktPrice, Con_GlobalVarName_BidPrice, Con_GlobalVarName_AskPrice)
strategy_naive(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][1],
global_tables[[Con_GlobalVarName_MktPrice]][["Date"]][length(global_tables[[Con_GlobalVarName_MktPrice]][["Date"]])],
"AAPL", global_tables, bid= Con_GlobalVarName_BidPrice,
ask = Con_GlobalVarName_AskPrice,
mktprice = Con_GlobalVarName_MktPrice,
positionbook = Con_GlobalVarName_PositionBook,
pendingbook = Con_GlobalVarName_LOB)
global_tables$tradesbook
global_tables$positionbook
temp_pos <- global_tables$positionbook[[2]]
temp_pos
temp_pos[,Con_FieldName_Qty] == 0
temp_pos[,Con_FieldName_Qty]
temp_pos <- global_tables$positionbook[[3]]
temp_pos
temp_pos[,Con_FieldName_Qty]
temp_pos[,Con_FieldName_Qty] == 0
temp_pos[temp_pos[,Con_FieldName_Qty] == 0,]
temp_pos[!temp_pos[,Con_FieldName_Qty] == 0,]
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
global_tables$tradesbook
global_tables$positionbook
source('~/APS490/APS490RBCCM/main.r', echo=TRUE)
global_tables$tradesbook
global_tables$positionbook
>>>>>>> origin/master
